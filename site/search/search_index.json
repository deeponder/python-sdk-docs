{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4f9d\u8d56 python3 \u5b89\u88c5 pip3 install deepwisdom -i https://pypi.deepwisdomai.com \u914d\u7f6e \u9274\u6743\u901a\u8fc7OAuth2.0, \u6240\u4ee5\u8fd9\u91cc\u8981\u5148\u7533\u8bf7\u7528\u6237\u7684 appid \u3001 api_key \u3001 secret_key \u914d\u7f6e\u65b9\u5f0f\u4e00\uff1a\u76f4\u63a5\u901a\u8fc7\u5236\u5b9a\u53c2\u6570\u7684\u65b9\u5f0f\u5b9e\u4f8b\u5316api_client\uff0c \u53c2\u8003\u5feb\u901f\u5f00\u59cb\u90e8\u5206 \u914d\u7f6e\u65b9\u5f0f\u4e8c: yaml\u914d\u7f6e\u6587\u4ef6\uff0c \u914d\u7f6e\u7684\u9ed8\u8ba4\u8def\u5f84\u4e3a ~./.config/deepwisdom/dwconfig.yaml , \u914d\u7f6e\u5185\u5bb9\u5982\u4e0b api_key: \"xx\" secret_key: \"xxx\" appid: 3 domain: \"xxx\" \u5feb\u901f\u5f00\u59cb import deepwisdom as dw api_client = dw.Client(appid=4, api_key=\"xxx\", secret_key=\"xxx\", domain=\"xxx\") dw.set_client(client=api_client) dataset = dw.Dataset.create_from_file(\"xxxx\", 0) \u7279\u6027 \u6570\u636e\u96c6\u7ba1\u7406\u3002 \u5305\u62ec\u6570\u636e\u96c6\u7684\u589e\u5220\u6539\u67e5\u3001\u6570\u636e\u96c6\u6a21\u7cca\u641c\u7d22 \u9879\u76ee\u7ba1\u7406\u3002 \u9879\u76ee\u7684\u589e\u5220\u6539\u67e5\u3001\u8bad\u7ec3\u7ba1\u7406\u3001\u79bb\u7ebf\u9884\u6d4b\u3001\u9ad8\u7ea7\u8bbe\u7f6e\u66f4\u65b0\u3001\u65b9\u6848/\u90e8\u7f72\u6a21\u578b\u5217\u8868 \u5b9e\u9a8c\u7ba1\u7406\u3002 \u5b9e\u9a8c\u8be6\u60c5\u6570\u636e\u67e5\u8be2\uff0c\u5305\u62ec\u8017\u65f6\u3001\u6027\u80fd\u548c\u6548\u679c\u6307\u6807 \u6700\u4f73\u65b9\u6848\u3002 \u5b9e\u9a8c\u7684\u65b9\u6848\u5217\u8868\u53ca\u5bf9\u5e94\u7684\u90e8\u7f72\u6a21\u578b\u4fe1\u606f \u79bb\u7ebf\u9884\u6d4b\u3002 \u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u5217\u8868\uff0c\u8fdb\u884c\u79bb\u7ebf\u9884\u6d4b \u63a8\u7406\u90e8\u7f72\u3002\u63a8\u7406\u670d\u52a1\u521b\u5efa\uff0c\u83b7\u53d6\u5217\u8868\uff0c\u4fee\u6539\u5e38\u9a7b\u72b6\u6001\uff0c\u4fee\u6539\u63a8\u7406\u670d\u52a1\u540d\u79f0\uff0c\u8c03\u7528\u670d\u52a1 \u8be6\u7ec6\u6587\u6863 API Reference\u3002 mkdocs serve -a 127.0.0.1:8000 tutorials","title":"Home"},{"location":"#_1","text":"python3","title":"\u4f9d\u8d56"},{"location":"#_2","text":"pip3 install deepwisdom -i https://pypi.deepwisdomai.com","title":"\u5b89\u88c5"},{"location":"#_3","text":"\u9274\u6743\u901a\u8fc7OAuth2.0, \u6240\u4ee5\u8fd9\u91cc\u8981\u5148\u7533\u8bf7\u7528\u6237\u7684 appid \u3001 api_key \u3001 secret_key \u914d\u7f6e\u65b9\u5f0f\u4e00\uff1a\u76f4\u63a5\u901a\u8fc7\u5236\u5b9a\u53c2\u6570\u7684\u65b9\u5f0f\u5b9e\u4f8b\u5316api_client\uff0c \u53c2\u8003\u5feb\u901f\u5f00\u59cb\u90e8\u5206 \u914d\u7f6e\u65b9\u5f0f\u4e8c: yaml\u914d\u7f6e\u6587\u4ef6\uff0c \u914d\u7f6e\u7684\u9ed8\u8ba4\u8def\u5f84\u4e3a ~./.config/deepwisdom/dwconfig.yaml , \u914d\u7f6e\u5185\u5bb9\u5982\u4e0b api_key: \"xx\" secret_key: \"xxx\" appid: 3 domain: \"xxx\"","title":"\u914d\u7f6e"},{"location":"#_4","text":"import deepwisdom as dw api_client = dw.Client(appid=4, api_key=\"xxx\", secret_key=\"xxx\", domain=\"xxx\") dw.set_client(client=api_client) dataset = dw.Dataset.create_from_file(\"xxxx\", 0)","title":"\u5feb\u901f\u5f00\u59cb"},{"location":"#_5","text":"\u6570\u636e\u96c6\u7ba1\u7406\u3002 \u5305\u62ec\u6570\u636e\u96c6\u7684\u589e\u5220\u6539\u67e5\u3001\u6570\u636e\u96c6\u6a21\u7cca\u641c\u7d22 \u9879\u76ee\u7ba1\u7406\u3002 \u9879\u76ee\u7684\u589e\u5220\u6539\u67e5\u3001\u8bad\u7ec3\u7ba1\u7406\u3001\u79bb\u7ebf\u9884\u6d4b\u3001\u9ad8\u7ea7\u8bbe\u7f6e\u66f4\u65b0\u3001\u65b9\u6848/\u90e8\u7f72\u6a21\u578b\u5217\u8868 \u5b9e\u9a8c\u7ba1\u7406\u3002 \u5b9e\u9a8c\u8be6\u60c5\u6570\u636e\u67e5\u8be2\uff0c\u5305\u62ec\u8017\u65f6\u3001\u6027\u80fd\u548c\u6548\u679c\u6307\u6807 \u6700\u4f73\u65b9\u6848\u3002 \u5b9e\u9a8c\u7684\u65b9\u6848\u5217\u8868\u53ca\u5bf9\u5e94\u7684\u90e8\u7f72\u6a21\u578b\u4fe1\u606f \u79bb\u7ebf\u9884\u6d4b\u3002 \u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u5217\u8868\uff0c\u8fdb\u884c\u79bb\u7ebf\u9884\u6d4b \u63a8\u7406\u90e8\u7f72\u3002\u63a8\u7406\u670d\u52a1\u521b\u5efa\uff0c\u83b7\u53d6\u5217\u8868\uff0c\u4fee\u6539\u5e38\u9a7b\u72b6\u6001\uff0c\u4fee\u6539\u63a8\u7406\u670d\u52a1\u540d\u79f0\uff0c\u8c03\u7528\u670d\u52a1","title":"\u7279\u6027"},{"location":"#_6","text":"API Reference\u3002 mkdocs serve -a 127.0.0.1:8000 tutorials","title":"\u8be6\u7ec6\u6587\u6863"},{"location":"API%20Reference/dataset/","text":"Dataset ( APIObject ) create_from_file ( filename = None , model_type = None , annotation_type = 1 , dataset_scene_id = 1 , sep = ' \\\\ t' , max_chunk_size = 10485760 ) classmethod \u4ece\u672c\u5730\u4e0a\u4f20\u3001\u521b\u5efa\u6570\u636e\u96c6 Parameters: Name Type Description Default filename str \u672c\u5730\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84 None model_type int \u6a21\u6001\u7c7b\u578b\u3002 0CSV,1VIDEO,2IMAGE,3SPEECH,4TEXT None annotation_type int \u6807\u6ce8\u7c7b\u578b\u3002\u9ed8\u8ba4\u5df2\u6807\u6ce81 1 dataset_scene_id int \u573a\u666fid\u3002\u9ed8\u8ba41 \u679a\u4e3e 1 sep str \u8868\u683c\u5206\u9694\u7b26\u3002 \u679a\u4e3e '\\\\t' max_chunk_size int \u5206\u7247\u4e0a\u4f20\u7684\u5927\u5c0f 10485760 Returns: Type Description Dataset Source code in deepwisdom/models/dataset.py @classmethod def create_from_file ( cls , filename : str = None , model_type : int = None , annotation_type : int = 1 , dataset_scene_id : int = 1 , sep : str = \" \\\\ t\" , max_chunk_size : int = 10 * 1024 * 1024 ): \"\"\" \u4ece\u672c\u5730\u4e0a\u4f20\u3001\u521b\u5efa\u6570\u636e\u96c6 Args: filename: \u672c\u5730\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84 model_type: \u6a21\u6001\u7c7b\u578b\u3002 0CSV,1VIDEO,2IMAGE,3SPEECH,4TEXT annotation_type: \u6807\u6ce8\u7c7b\u578b\u3002\u9ed8\u8ba4\u5df2\u6807\u6ce81 dataset_scene_id: \u573a\u666fid\u3002\u9ed8\u8ba41 \u679a\u4e3e sep: \u8868\u683c\u5206\u9694\u7b26\u3002 \u679a\u4e3e max_chunk_size: \u5206\u7247\u4e0a\u4f20\u7684\u5927\u5c0f Returns: Dataset \"\"\" dataset_id , msg = cls . dataset_upload ( filename , model_type , annotation_type , dataset_scene_id , sep , max_chunk_size ) if dataset_id < 0 : logging . info ( msg ) raise err . UploadTrainDataError data = { \"dataset_id\" : dataset_id } server_data = cls . _server_data ( API_URL . DATASET_INFO , data ) return cls . from_server_data ( server_data ) dataset_search ( query ) classmethod \u67e5\u8be2\u6570\u636e\u96c6\u5217\u8868 \u9ed8\u8ba4\u53ea\u62c9\u4e00\u9875\uff0c\u81f3\u591a50\u6761\u6570\u636e, \u6309\u66f4\u65b0\u7684\u65f6\u95f4\u6392\u5e8f Parameters: Name Type Description Default query str \u6a21\u7cca\u67e5\u8be2\u5173\u952e\u5b57 required Source code in deepwisdom/models/dataset.py @classmethod def dataset_search ( cls , query : str ): \"\"\" \u67e5\u8be2\u6570\u636e\u96c6\u5217\u8868 \u9ed8\u8ba4\u53ea\u62c9\u4e00\u9875\uff0c\u81f3\u591a50\u6761\u6570\u636e, \u6309\u66f4\u65b0\u7684\u65f6\u95f4\u6392\u5e8f Args: query (str): \u6a21\u7cca\u67e5\u8be2\u5173\u952e\u5b57 Returns: \"\"\" data = { \"query\" : query , \"page\" : 1 , \"limit\" : 50 , \"sortrules\" : \"-update_time\" } server_data = cls . _server_data ( API_URL . DATASET_LIST , data ) init_data = [ dict ( Dataset . _safe_data ( item )) for item in server_data ] return [ Dataset ( ** data ) for data in init_data ] dataset_upload ( file_path , model_type , annotation_type , dataset_scene_id , sep , max_chunk_size ) classmethod \u6570\u636e\u96c6\u4e0a\u4f20 Parameters: Name Type Description Default file_path str required model_type int required annotation_type int required dataset_scene_id int required sep str required max_chunk_size int required Source code in deepwisdom/models/dataset.py @classmethod def dataset_upload ( cls , file_path : str , model_type : int , annotation_type : int , dataset_scene_id : int , sep : str , max_chunk_size : int ): \"\"\" \u6570\u636e\u96c6\u4e0a\u4f20 Args: file_path: model_type: annotation_type: dataset_scene_id: sep: max_chunk_size: Returns: \"\"\" upload_id = _get_upload_id ( file_path ) if upload_id == \"\" : return - 1 , file_path + \" doesn't exist\" # file_path = filepath.replace('\\\\', '/') file_names = os . path . split ( file_path ) filename = file_names [ - 1 ] # \u4e0a\u4f20\u51c6\u5907 prepare_data = {} prepare_data [ \"modal_type\" ] = model_type prepare_data [ \"filename\" ] = filename prepare_data [ \"upload_id\" ] = upload_id resp = cls . _client . _post ( API_URL . DATASET_PREPARE , prepare_data ) if resp [ \"data\" ][ \"ret\" ] != 1 : return - 1 , resp _chunk_id_list = resp [ \"data\" ][ \"chunk_id_list\" ] chunk_id_list = list () # \u6587\u4ef6\u4e0a\u4f20 with open ( file_path , 'rb' ) as fp : while 1 : chunk = fp . read ( max_chunk_size ) if not chunk : break chunk_id = hashlib . md5 ( chunk ) . hexdigest () chunk_id_list . append ( chunk_id ) if chunk_id in _chunk_id_list : continue uploadData = {} uploadData [ \"upload_id\" ] = upload_id uploadData [ \"chunk_id\" ] = chunk_id chunk_fp = BytesIO ( chunk ) files = { \"file\" : ( chunk_id , chunk_fp , 'application/octet-stream' ) } resp = cls . _file_upload ( API_URL . FILE_UPLOAD , files , uploadData ) chunk_fp . close () if resp [ \"data\" ][ \"ret\" ] != 1 : return - 1 , resp # \u6570\u636e\u96c6\u4e0a\u4f20 dataset_deal_data = {} dataset_deal_data [ \"filename\" ] = filename dataset_deal_data [ \"upload_id\" ] = upload_id dataset_deal_data [ \"chunk_id_list\" ] = json . dumps ( chunk_id_list ) dataset_deal_data [ \"modal_type\" ] = model_type dataset_deal_data [ \"sep\" ] = sep dataset_deal_data [ \"annotation_type\" ] = annotation_type # \u573a\u666fId\uff0c \u4e8c\u5206\u7b49 dataset_deal_data [ \"dataset_scene_id\" ] = dataset_scene_id resp = cls . _client . _post ( API_URL . DATASET_UPLOAD , dataset_deal_data ) if resp [ \"data\" ][ \"ret\" ] != 1 : return - 1 , resp # 3\u79d2\u95f4\u9694\uff0c\u8f6e\u8be2\u83b7\u53d6 # \u83b7\u53d6\u6570\u636e\u96c6\u4fe1\u606f while True : dataset_query_data = {} dataset_query_data [ \"upload_id\" ] = upload_id resp = cls . _client . _post ( API_URL . DATASET_QUERY , dataset_query_data ) logging . info ( resp ) if resp [ \"errNo\" ] != 0 or resp [ \"data\" ][ \"data_set_id\" ] == - 1 : return - 1 , resp # id\u4e0d\u4e3a0\u751f\u6210\u5b8c\u6210 if resp [ \"data\" ][ \"data_set_id\" ] > 0 : return resp [ \"data\" ][ \"data_set_id\" ], \"success\" time . sleep ( 3 ) delete ( dataset_ids ) classmethod \u6279\u91cf\u6570\u636e\u96c6 Parameters: Name Type Description Default dataset_ids list \u9700\u8981\u5220\u9664\u7684\u6570\u636e\u96c6id\u5217\u8868 required Source code in deepwisdom/models/dataset.py @classmethod def delete ( cls , dataset_ids : list ): \"\"\" \u6279\u91cf\u6570\u636e\u96c6 Args: dataset_ids (list): \u9700\u8981\u5220\u9664\u7684\u6570\u636e\u96c6id\u5217\u8868 Returns: \"\"\" data = { \"dataset_ids\" : dataset_ids } cls . _client . _delete ( API_URL . DATASET_DELETE , data ) modify_dataset ( dataset_id , new_name = '' ) classmethod \u91cd\u547d\u540d\u6570\u636e\u96c6 Parameters: Name Type Description Default dataset_id int \u6570\u636e\u96c6id required new_name str \u65b0\u7684\u540d\u5b57 '' Source code in deepwisdom/models/dataset.py @classmethod def modify_dataset ( cls , dataset_id : int , new_name : str = \"\" ): \"\"\" \u91cd\u547d\u540d\u6570\u636e\u96c6 Args: dataset_id (int): \u6570\u636e\u96c6id new_name (str): \u65b0\u7684\u540d\u5b57 Returns: \"\"\" data = { \"dataset_id\" : dataset_id , \"file_name\" : new_name } cls . _client . _patch ( API_URL . DATASET_MODIFY , data )","title":"Dataset"},{"location":"API%20Reference/dataset/#deepwisdom.models.dataset.Dataset","text":"","title":"Dataset"},{"location":"API%20Reference/dataset/#deepwisdom.models.dataset.Dataset.create_from_file","text":"\u4ece\u672c\u5730\u4e0a\u4f20\u3001\u521b\u5efa\u6570\u636e\u96c6 Parameters: Name Type Description Default filename str \u672c\u5730\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84 None model_type int \u6a21\u6001\u7c7b\u578b\u3002 0CSV,1VIDEO,2IMAGE,3SPEECH,4TEXT None annotation_type int \u6807\u6ce8\u7c7b\u578b\u3002\u9ed8\u8ba4\u5df2\u6807\u6ce81 1 dataset_scene_id int \u573a\u666fid\u3002\u9ed8\u8ba41 \u679a\u4e3e 1 sep str \u8868\u683c\u5206\u9694\u7b26\u3002 \u679a\u4e3e '\\\\t' max_chunk_size int \u5206\u7247\u4e0a\u4f20\u7684\u5927\u5c0f 10485760 Returns: Type Description Dataset Source code in deepwisdom/models/dataset.py @classmethod def create_from_file ( cls , filename : str = None , model_type : int = None , annotation_type : int = 1 , dataset_scene_id : int = 1 , sep : str = \" \\\\ t\" , max_chunk_size : int = 10 * 1024 * 1024 ): \"\"\" \u4ece\u672c\u5730\u4e0a\u4f20\u3001\u521b\u5efa\u6570\u636e\u96c6 Args: filename: \u672c\u5730\u6570\u636e\u96c6\u7684\u7edd\u5bf9\u8def\u5f84 model_type: \u6a21\u6001\u7c7b\u578b\u3002 0CSV,1VIDEO,2IMAGE,3SPEECH,4TEXT annotation_type: \u6807\u6ce8\u7c7b\u578b\u3002\u9ed8\u8ba4\u5df2\u6807\u6ce81 dataset_scene_id: \u573a\u666fid\u3002\u9ed8\u8ba41 \u679a\u4e3e sep: \u8868\u683c\u5206\u9694\u7b26\u3002 \u679a\u4e3e max_chunk_size: \u5206\u7247\u4e0a\u4f20\u7684\u5927\u5c0f Returns: Dataset \"\"\" dataset_id , msg = cls . dataset_upload ( filename , model_type , annotation_type , dataset_scene_id , sep , max_chunk_size ) if dataset_id < 0 : logging . info ( msg ) raise err . UploadTrainDataError data = { \"dataset_id\" : dataset_id } server_data = cls . _server_data ( API_URL . DATASET_INFO , data ) return cls . from_server_data ( server_data )","title":"create_from_file()"},{"location":"API%20Reference/dataset/#deepwisdom.models.dataset.Dataset.dataset_search","text":"\u67e5\u8be2\u6570\u636e\u96c6\u5217\u8868 \u9ed8\u8ba4\u53ea\u62c9\u4e00\u9875\uff0c\u81f3\u591a50\u6761\u6570\u636e, \u6309\u66f4\u65b0\u7684\u65f6\u95f4\u6392\u5e8f Parameters: Name Type Description Default query str \u6a21\u7cca\u67e5\u8be2\u5173\u952e\u5b57 required Source code in deepwisdom/models/dataset.py @classmethod def dataset_search ( cls , query : str ): \"\"\" \u67e5\u8be2\u6570\u636e\u96c6\u5217\u8868 \u9ed8\u8ba4\u53ea\u62c9\u4e00\u9875\uff0c\u81f3\u591a50\u6761\u6570\u636e, \u6309\u66f4\u65b0\u7684\u65f6\u95f4\u6392\u5e8f Args: query (str): \u6a21\u7cca\u67e5\u8be2\u5173\u952e\u5b57 Returns: \"\"\" data = { \"query\" : query , \"page\" : 1 , \"limit\" : 50 , \"sortrules\" : \"-update_time\" } server_data = cls . _server_data ( API_URL . DATASET_LIST , data ) init_data = [ dict ( Dataset . _safe_data ( item )) for item in server_data ] return [ Dataset ( ** data ) for data in init_data ]","title":"dataset_search()"},{"location":"API%20Reference/dataset/#deepwisdom.models.dataset.Dataset.dataset_upload","text":"\u6570\u636e\u96c6\u4e0a\u4f20 Parameters: Name Type Description Default file_path str required model_type int required annotation_type int required dataset_scene_id int required sep str required max_chunk_size int required Source code in deepwisdom/models/dataset.py @classmethod def dataset_upload ( cls , file_path : str , model_type : int , annotation_type : int , dataset_scene_id : int , sep : str , max_chunk_size : int ): \"\"\" \u6570\u636e\u96c6\u4e0a\u4f20 Args: file_path: model_type: annotation_type: dataset_scene_id: sep: max_chunk_size: Returns: \"\"\" upload_id = _get_upload_id ( file_path ) if upload_id == \"\" : return - 1 , file_path + \" doesn't exist\" # file_path = filepath.replace('\\\\', '/') file_names = os . path . split ( file_path ) filename = file_names [ - 1 ] # \u4e0a\u4f20\u51c6\u5907 prepare_data = {} prepare_data [ \"modal_type\" ] = model_type prepare_data [ \"filename\" ] = filename prepare_data [ \"upload_id\" ] = upload_id resp = cls . _client . _post ( API_URL . DATASET_PREPARE , prepare_data ) if resp [ \"data\" ][ \"ret\" ] != 1 : return - 1 , resp _chunk_id_list = resp [ \"data\" ][ \"chunk_id_list\" ] chunk_id_list = list () # \u6587\u4ef6\u4e0a\u4f20 with open ( file_path , 'rb' ) as fp : while 1 : chunk = fp . read ( max_chunk_size ) if not chunk : break chunk_id = hashlib . md5 ( chunk ) . hexdigest () chunk_id_list . append ( chunk_id ) if chunk_id in _chunk_id_list : continue uploadData = {} uploadData [ \"upload_id\" ] = upload_id uploadData [ \"chunk_id\" ] = chunk_id chunk_fp = BytesIO ( chunk ) files = { \"file\" : ( chunk_id , chunk_fp , 'application/octet-stream' ) } resp = cls . _file_upload ( API_URL . FILE_UPLOAD , files , uploadData ) chunk_fp . close () if resp [ \"data\" ][ \"ret\" ] != 1 : return - 1 , resp # \u6570\u636e\u96c6\u4e0a\u4f20 dataset_deal_data = {} dataset_deal_data [ \"filename\" ] = filename dataset_deal_data [ \"upload_id\" ] = upload_id dataset_deal_data [ \"chunk_id_list\" ] = json . dumps ( chunk_id_list ) dataset_deal_data [ \"modal_type\" ] = model_type dataset_deal_data [ \"sep\" ] = sep dataset_deal_data [ \"annotation_type\" ] = annotation_type # \u573a\u666fId\uff0c \u4e8c\u5206\u7b49 dataset_deal_data [ \"dataset_scene_id\" ] = dataset_scene_id resp = cls . _client . _post ( API_URL . DATASET_UPLOAD , dataset_deal_data ) if resp [ \"data\" ][ \"ret\" ] != 1 : return - 1 , resp # 3\u79d2\u95f4\u9694\uff0c\u8f6e\u8be2\u83b7\u53d6 # \u83b7\u53d6\u6570\u636e\u96c6\u4fe1\u606f while True : dataset_query_data = {} dataset_query_data [ \"upload_id\" ] = upload_id resp = cls . _client . _post ( API_URL . DATASET_QUERY , dataset_query_data ) logging . info ( resp ) if resp [ \"errNo\" ] != 0 or resp [ \"data\" ][ \"data_set_id\" ] == - 1 : return - 1 , resp # id\u4e0d\u4e3a0\u751f\u6210\u5b8c\u6210 if resp [ \"data\" ][ \"data_set_id\" ] > 0 : return resp [ \"data\" ][ \"data_set_id\" ], \"success\" time . sleep ( 3 )","title":"dataset_upload()"},{"location":"API%20Reference/dataset/#deepwisdom.models.dataset.Dataset.delete","text":"\u6279\u91cf\u6570\u636e\u96c6 Parameters: Name Type Description Default dataset_ids list \u9700\u8981\u5220\u9664\u7684\u6570\u636e\u96c6id\u5217\u8868 required Source code in deepwisdom/models/dataset.py @classmethod def delete ( cls , dataset_ids : list ): \"\"\" \u6279\u91cf\u6570\u636e\u96c6 Args: dataset_ids (list): \u9700\u8981\u5220\u9664\u7684\u6570\u636e\u96c6id\u5217\u8868 Returns: \"\"\" data = { \"dataset_ids\" : dataset_ids } cls . _client . _delete ( API_URL . DATASET_DELETE , data )","title":"delete()"},{"location":"API%20Reference/dataset/#deepwisdom.models.dataset.Dataset.modify_dataset","text":"\u91cd\u547d\u540d\u6570\u636e\u96c6 Parameters: Name Type Description Default dataset_id int \u6570\u636e\u96c6id required new_name str \u65b0\u7684\u540d\u5b57 '' Source code in deepwisdom/models/dataset.py @classmethod def modify_dataset ( cls , dataset_id : int , new_name : str = \"\" ): \"\"\" \u91cd\u547d\u540d\u6570\u636e\u96c6 Args: dataset_id (int): \u6570\u636e\u96c6id new_name (str): \u65b0\u7684\u540d\u5b57 Returns: \"\"\" data = { \"dataset_id\" : dataset_id , \"file_name\" : new_name } cls . _client . _patch ( API_URL . DATASET_MODIFY , data )","title":"modify_dataset()"},{"location":"API%20Reference/deployment/","text":"\u63a8\u7406\u670d\u52a1\u90e8\u7f72 \u901a\u8fc7 get_deployment_detail \u53ef\u4ee5\u5feb\u901f\u8fd4\u56de\u4e00\u4e2adeployment\u5bf9\u8c61\uff0c\u800c\u4e0d\u5fc5\u76f4\u63a5\u5b9e\u4f8b\u5316 Deployment(...) \u8c03\u7528\u670d\u52a1: deploy = Deployment.get_service(200) print(deploy.call_service({})) --- \u83b7\u53d6\u670d\u52a1\u5217\u8868: deploys = Deployment.list_deployments(3976) for deploy in deploys: detail = deploy.get_deployment_detail() print(deploys) --- \u4fee\u590d\u670d\u52a1\u540d\u79f0: deploy = Deployment.rename_deployment(deploy_id, \"\u732a\u516b\u6212\u5403\u4e86\u5510\u50e7\") Deployment ( APIObject ) dataclass Deployment(id: int = 0, project_id: int = 0, user_id: int = 0, name: str = '', service_name: str = '', model_inst_id: int = 0, serverless_infer_id: int = 0, deploy_model: str = '', route_path: str = '', token: str = '', token_url: str = '', status: int = 0, infer_lock: int = 0, min_pod: int = 0, max_pod: int = 0, create_time: str = '', update_time: str = '', deploy_time: str = '', is_del: int = 0) call_service ( self , data ) \u8c03\u7528\u670d\u52a1 Parameters: Name Type Description Default data Any \u670d\u52a1\u8c03\u7528\u5165\u53c2\uff0cget_service_api()\u53ef\u4ee5\u8fd4\u56dedemo required Returns: Type Description Any \u54cd\u5e94body\uff0cget_service_api()\u53ef\u4ee5\u8fd4\u56dedemo Source code in deepwisdom/models/deployment.py def call_service ( self , data : Any ) -> Any : \"\"\"\u8c03\u7528\u670d\u52a1 Args: data (Any): \u670d\u52a1\u8c03\u7528\u5165\u53c2\uff0cget_service_api()\u53ef\u4ee5\u8fd4\u56dedemo Returns: Any: \u54cd\u5e94body\uff0cget_service_api()\u53ef\u4ee5\u8fd4\u56dedemo \"\"\" header = { \"Authorization\" : \"Bearer {} \" . format ( self . token ) } rsp = self . _client . raw_request ( \"post\" , self . token_url , data , headers = header ) return rsp create_deployment ( options ) classmethod \u521b\u5efa\u670d\u52a1 Parameters: Name Type Description Default options CreateDeployRequest \u670d\u52a1\u521b\u5efa\u8bf7\u6c42\u53c2\u6570 required Returns: Type Description [Deployment] \u8fd4\u56de\u5177\u4f53\u7684\u670d\u52a1\u5bf9\u8c61 Source code in deepwisdom/models/deployment.py @classmethod def create_deployment ( cls , options : CreateDeployRequest ) -> \"Deployment\" : \"\"\"\u521b\u5efa\u670d\u52a1 Args: options (CreateDeployRequest): \u670d\u52a1\u521b\u5efa\u8bf7\u6c42\u53c2\u6570 Returns: [Deployment]: \u8fd4\u56de\u5177\u4f53\u7684\u670d\u52a1\u5bf9\u8c61 \"\"\" data = {} data . update ( options ) rsp = cls . _client . _post ( API_URL . DEPLOY_CREATE_SERVICE , data ) if \"data\" in rsp and \"ret\" in rsp [ \"data\" ] and len ( rsp [ \"data\" ][ \"ret\" ]) == 1 : return cls . from_server_data ( rsp [ 'data' ][ \"ret\" ][ 0 ]) return None delete_deployments ( service_ids ) classmethod \u5220\u9664\u670d\u52a1 Parameters: Name Type Description Default service_ids int64 \u670d\u52a1id required Source code in deepwisdom/models/deployment.py @classmethod def delete_deployments ( cls , service_ids : List [ int ]) -> bool : \"\"\"\u5220\u9664\u670d\u52a1 Args: service_ids (int64): \u670d\u52a1id \"\"\" data = { \"svc_ids\" : service_ids } rsp = cls . _client . _delete ( API_URL . DEPLOY_DELETE_DEPLOYMENT , data ) if rsp [ 'code' ] == 200 and rsp [ 'message' ] == 'ok' : return True return False get_deployment_detail ( service_id , ** kwargs ) classmethod \u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Parameters: Name Type Description Default service_id int \u670d\u52a1id required Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def get_deployment_detail ( cls , service_id , ** kwargs ) -> \"Deployment\" : \"\"\"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Args: service_id (int): \u670d\u52a1id Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"service_id\" : service_id } rsp = cls . _server_data ( API_URL . DEPLOY_GET_SERVICE_DETAIL , data ) if rsp : return cls . from_server_data ( rsp ) get_deployment_log ( svc_id ) classmethod \u83b7\u53d6\u670d\u52a1\u65e5\u5fd7 Parameters: Name Type Description Default svc_id int \u670d\u52a1id required Returns: Type Description str \u65e5\u5fd7\u5185\u5bb9 Source code in deepwisdom/models/deployment.py @classmethod def get_deployment_log ( cls , svc_id : int ) -> str : \"\"\"\u83b7\u53d6\u670d\u52a1\u65e5\u5fd7 Args: svc_id (int): \u670d\u52a1id Returns: str: \u65e5\u5fd7\u5185\u5bb9 \"\"\" data = { \"service_id\" : svc_id } rsp = cls . _client . _get ( API_URL . DEPLOY_GET_DEPLOYMENT_LOG , data ) if \"data\" in rsp : return rsp [ 'data' ] return None get_service ( service_id , ** kwargs ) classmethod \u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Parameters: Name Type Description Default service_id int \u670d\u52a1id required Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def get_service ( cls , service_id , ** kwargs ) -> \"Deployment\" : \"\"\"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Args: service_id (int): \u670d\u52a1id Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"service_id\" : service_id } rsp = cls . _server_data ( API_URL . DEPLOY_GET_SERVICE_DETAIL , data ) return cls . from_server_data ( rsp ) get_service_api ( svc_id ) classmethod \u83b7\u53d6\u670d\u52a1api Parameters: Name Type Description Default svc_id int \u670d\u52a1id required Returns: Type Description ServiceApiInfo api\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def get_service_api ( cls , svc_id : int ) -> ServiceApiInfo : \"\"\"\u83b7\u53d6\u670d\u52a1api Args: svc_id (int): \u670d\u52a1id Returns: ServiceApiInfo: api\u8be6\u60c5 \"\"\" data = { \"svc_id\" : svc_id } rsp = cls . _client . _get ( API_URL . DEPLOY_GET_SERVICE_API , data ) if \"data\" in rsp : checked = ServiceApiInfo . _converter . check ( rsp [ 'data' ]) filtered = Deployment . _filter_data ( checked ) return ServiceApiInfo ( ** filtered ) return None get_service_status ( self ) \u83b7\u53d6\u670d\u52a1\u72b6\u6001 Returns: Type Description Int \u670d\u52a1\u72b6\u6001\uff1a1-\u521b\u5efa\uff0c2-\u8c03\u5ea6\u4e2d\uff0c3-\u8c03\u5ea6\u6210\u529f\uff0c4-\u6267\u884c\u4e2d\uff0c5-\u521b\u5efa\u5931\u8d25\uff0c6-\u6302\u8d77\uff0c7-\u53d6\u6d88\uff0c8-\u5220\u9664\u4e2d\uff0c9- \u5df2\u5220\u9664 Source code in deepwisdom/models/deployment.py def get_service_status ( self ) -> Int : \"\"\"\u83b7\u53d6\u670d\u52a1\u72b6\u6001 Returns: Int: \u670d\u52a1\u72b6\u6001\uff1a1-\u521b\u5efa\uff0c2-\u8c03\u5ea6\u4e2d\uff0c3-\u8c03\u5ea6\u6210\u529f\uff0c4-\u6267\u884c\u4e2d\uff0c5-\u521b\u5efa\u5931\u8d25\uff0c6-\u6302\u8d77\uff0c7-\u53d6\u6d88\uff0c8-\u5220\u9664\u4e2d\uff0c9- \u5df2\u5220\u9664 \"\"\" self . get_deployment_detail ( self . id ) return self . status list_deployments ( project_id , ** kwargs ) classmethod \u83b7\u53d6\u670d\u52a1\u90e8\u7f72\u5217\u8868 Parameters: Name Type Description Default project_id int \u9879\u76eeid required Returns: Type Description List[DeploymentListMember] \u670d\u52a1\u5217\u8868 Source code in deepwisdom/models/deployment.py @classmethod def list_deployments ( cls , project_id : int , ** kwargs ) -> List [ \"DeploymentListMember\" ]: \"\"\"\u83b7\u53d6\u670d\u52a1\u90e8\u7f72\u5217\u8868 Args: project_id (int): \u9879\u76eeid Returns: List[DeploymentListMember]: \u670d\u52a1\u5217\u8868 \"\"\" data = { \"project_id\" : project_id } server_data = cls . _server_data ( API_URL . DEPLOY_LIST_DEPLOYMENTS , data ) # return [cls.get_deployment_detail(item[\"service_id\"]) for item in server_data] return [ DeploymentListMember ( ** item ) for item in server_data ] rename_deployment ( svc_id , svc_name ) classmethod \u91cd\u547d\u540d\u670d\u52a1 Parameters: Name Type Description Default svc_id int \u670d\u52a1id required svc_name str \u65b0\u670d\u52a1\u540d\u79f0 required Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def rename_deployment ( cls , svc_id : int , svc_name : str ): \"\"\"\u91cd\u547d\u540d\u670d\u52a1 Args: svc_id (int): \u670d\u52a1id svc_name (str): \u65b0\u670d\u52a1\u540d\u79f0 Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"svc_id\" : svc_id , \"svc_name\" : svc_name } rsp = cls . _client . _patch ( API_URL . DEPLOY_RENAME_DEPLOYMENT , data ) if rsp [ 'code' ] == 200 and rsp [ 'message' ] == 'ok' : return cls . get_deployment_detail ( svc_id ) return None resident_deployment ( svc_id , min_pod ) classmethod \u5207\u6362\u670d\u52a1\u5e38\u9a7b\u72b6\u6001 Parameters: Name Type Description Default svc_id int64 \u670d\u52a1id required min_pod int \u6700\u5c11pod\u6570\uff0c\u5927\u4e8e0\u4e3a\u670d\u52a1\u5e38\u9a7b\uff0c\u7b49\u4e8e0\u4e3a\u975e\u5e38\u9a7b required Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def resident_deployment ( cls , svc_id : int , min_pod : int ): \"\"\"\u5207\u6362\u670d\u52a1\u5e38\u9a7b\u72b6\u6001 Args: svc_id (int64): \u670d\u52a1id min_pod (int): \u6700\u5c11pod\u6570\uff0c\u5927\u4e8e0\u4e3a\u670d\u52a1\u5e38\u9a7b\uff0c\u7b49\u4e8e0\u4e3a\u975e\u5e38\u9a7b Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"svc_id\" : svc_id , \"min_pod\" : min_pod } rsp = cls . _client . _post ( API_URL . DEPLOY_RESIDENT_DEPLOYMENT , data ) if rsp [ 'code' ] == 200 and rsp [ 'message' ] == 'ok' : return cls . get_deployment_detail ( svc_id ) return None DeploymentListMember ( APIObject ) dataclass DeploymentListMember(service_id: int = 0, service_name: str = '', min_pod: int = 0, model_name: str = '', trial_no: int = 0, trial_type: int = 0, recom_model: str = '', eval_metric: trafaret.base.Any = '', service_status: int = 0, service_create_time: str = '') get_deployment_detail ( self ) \u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py def get_deployment_detail ( self ) -> \"Deployment\" : \"\"\"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"service_id\" : self . service_id } rsp = self . _client . _get ( API_URL . DEPLOY_GET_SERVICE_DETAIL , data ) if \"data\" in rsp : checked = Deployment . _converter . check ( rsp [ 'data' ]) filtered = Deployment . _filter_data ( checked ) return Deployment ( ** filtered ) ServiceApiInfo ( APIObject ) dataclass ServiceApiInfo(http_type: str = '', token: str = '', url: str = '', post_example: trafaret.base.Any = '', data_example: trafaret.base.Any = '', response_example: trafaret.base.Any = None)","title":"Deployment"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment","text":"Deployment(id: int = 0, project_id: int = 0, user_id: int = 0, name: str = '', service_name: str = '', model_inst_id: int = 0, serverless_infer_id: int = 0, deploy_model: str = '', route_path: str = '', token: str = '', token_url: str = '', status: int = 0, infer_lock: int = 0, min_pod: int = 0, max_pod: int = 0, create_time: str = '', update_time: str = '', deploy_time: str = '', is_del: int = 0)","title":"Deployment"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.call_service","text":"\u8c03\u7528\u670d\u52a1 Parameters: Name Type Description Default data Any \u670d\u52a1\u8c03\u7528\u5165\u53c2\uff0cget_service_api()\u53ef\u4ee5\u8fd4\u56dedemo required Returns: Type Description Any \u54cd\u5e94body\uff0cget_service_api()\u53ef\u4ee5\u8fd4\u56dedemo Source code in deepwisdom/models/deployment.py def call_service ( self , data : Any ) -> Any : \"\"\"\u8c03\u7528\u670d\u52a1 Args: data (Any): \u670d\u52a1\u8c03\u7528\u5165\u53c2\uff0cget_service_api()\u53ef\u4ee5\u8fd4\u56dedemo Returns: Any: \u54cd\u5e94body\uff0cget_service_api()\u53ef\u4ee5\u8fd4\u56dedemo \"\"\" header = { \"Authorization\" : \"Bearer {} \" . format ( self . token ) } rsp = self . _client . raw_request ( \"post\" , self . token_url , data , headers = header ) return rsp","title":"call_service()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.create_deployment","text":"\u521b\u5efa\u670d\u52a1 Parameters: Name Type Description Default options CreateDeployRequest \u670d\u52a1\u521b\u5efa\u8bf7\u6c42\u53c2\u6570 required Returns: Type Description [Deployment] \u8fd4\u56de\u5177\u4f53\u7684\u670d\u52a1\u5bf9\u8c61 Source code in deepwisdom/models/deployment.py @classmethod def create_deployment ( cls , options : CreateDeployRequest ) -> \"Deployment\" : \"\"\"\u521b\u5efa\u670d\u52a1 Args: options (CreateDeployRequest): \u670d\u52a1\u521b\u5efa\u8bf7\u6c42\u53c2\u6570 Returns: [Deployment]: \u8fd4\u56de\u5177\u4f53\u7684\u670d\u52a1\u5bf9\u8c61 \"\"\" data = {} data . update ( options ) rsp = cls . _client . _post ( API_URL . DEPLOY_CREATE_SERVICE , data ) if \"data\" in rsp and \"ret\" in rsp [ \"data\" ] and len ( rsp [ \"data\" ][ \"ret\" ]) == 1 : return cls . from_server_data ( rsp [ 'data' ][ \"ret\" ][ 0 ]) return None","title":"create_deployment()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.delete_deployments","text":"\u5220\u9664\u670d\u52a1 Parameters: Name Type Description Default service_ids int64 \u670d\u52a1id required Source code in deepwisdom/models/deployment.py @classmethod def delete_deployments ( cls , service_ids : List [ int ]) -> bool : \"\"\"\u5220\u9664\u670d\u52a1 Args: service_ids (int64): \u670d\u52a1id \"\"\" data = { \"svc_ids\" : service_ids } rsp = cls . _client . _delete ( API_URL . DEPLOY_DELETE_DEPLOYMENT , data ) if rsp [ 'code' ] == 200 and rsp [ 'message' ] == 'ok' : return True return False","title":"delete_deployments()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.get_deployment_detail","text":"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Parameters: Name Type Description Default service_id int \u670d\u52a1id required Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def get_deployment_detail ( cls , service_id , ** kwargs ) -> \"Deployment\" : \"\"\"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Args: service_id (int): \u670d\u52a1id Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"service_id\" : service_id } rsp = cls . _server_data ( API_URL . DEPLOY_GET_SERVICE_DETAIL , data ) if rsp : return cls . from_server_data ( rsp )","title":"get_deployment_detail()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.get_deployment_log","text":"\u83b7\u53d6\u670d\u52a1\u65e5\u5fd7 Parameters: Name Type Description Default svc_id int \u670d\u52a1id required Returns: Type Description str \u65e5\u5fd7\u5185\u5bb9 Source code in deepwisdom/models/deployment.py @classmethod def get_deployment_log ( cls , svc_id : int ) -> str : \"\"\"\u83b7\u53d6\u670d\u52a1\u65e5\u5fd7 Args: svc_id (int): \u670d\u52a1id Returns: str: \u65e5\u5fd7\u5185\u5bb9 \"\"\" data = { \"service_id\" : svc_id } rsp = cls . _client . _get ( API_URL . DEPLOY_GET_DEPLOYMENT_LOG , data ) if \"data\" in rsp : return rsp [ 'data' ] return None","title":"get_deployment_log()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.get_service","text":"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Parameters: Name Type Description Default service_id int \u670d\u52a1id required Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def get_service ( cls , service_id , ** kwargs ) -> \"Deployment\" : \"\"\"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Args: service_id (int): \u670d\u52a1id Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"service_id\" : service_id } rsp = cls . _server_data ( API_URL . DEPLOY_GET_SERVICE_DETAIL , data ) return cls . from_server_data ( rsp )","title":"get_service()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.get_service_api","text":"\u83b7\u53d6\u670d\u52a1api Parameters: Name Type Description Default svc_id int \u670d\u52a1id required Returns: Type Description ServiceApiInfo api\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def get_service_api ( cls , svc_id : int ) -> ServiceApiInfo : \"\"\"\u83b7\u53d6\u670d\u52a1api Args: svc_id (int): \u670d\u52a1id Returns: ServiceApiInfo: api\u8be6\u60c5 \"\"\" data = { \"svc_id\" : svc_id } rsp = cls . _client . _get ( API_URL . DEPLOY_GET_SERVICE_API , data ) if \"data\" in rsp : checked = ServiceApiInfo . _converter . check ( rsp [ 'data' ]) filtered = Deployment . _filter_data ( checked ) return ServiceApiInfo ( ** filtered ) return None","title":"get_service_api()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.get_service_status","text":"\u83b7\u53d6\u670d\u52a1\u72b6\u6001 Returns: Type Description Int \u670d\u52a1\u72b6\u6001\uff1a1-\u521b\u5efa\uff0c2-\u8c03\u5ea6\u4e2d\uff0c3-\u8c03\u5ea6\u6210\u529f\uff0c4-\u6267\u884c\u4e2d\uff0c5-\u521b\u5efa\u5931\u8d25\uff0c6-\u6302\u8d77\uff0c7-\u53d6\u6d88\uff0c8-\u5220\u9664\u4e2d\uff0c9- \u5df2\u5220\u9664 Source code in deepwisdom/models/deployment.py def get_service_status ( self ) -> Int : \"\"\"\u83b7\u53d6\u670d\u52a1\u72b6\u6001 Returns: Int: \u670d\u52a1\u72b6\u6001\uff1a1-\u521b\u5efa\uff0c2-\u8c03\u5ea6\u4e2d\uff0c3-\u8c03\u5ea6\u6210\u529f\uff0c4-\u6267\u884c\u4e2d\uff0c5-\u521b\u5efa\u5931\u8d25\uff0c6-\u6302\u8d77\uff0c7-\u53d6\u6d88\uff0c8-\u5220\u9664\u4e2d\uff0c9- \u5df2\u5220\u9664 \"\"\" self . get_deployment_detail ( self . id ) return self . status","title":"get_service_status()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.list_deployments","text":"\u83b7\u53d6\u670d\u52a1\u90e8\u7f72\u5217\u8868 Parameters: Name Type Description Default project_id int \u9879\u76eeid required Returns: Type Description List[DeploymentListMember] \u670d\u52a1\u5217\u8868 Source code in deepwisdom/models/deployment.py @classmethod def list_deployments ( cls , project_id : int , ** kwargs ) -> List [ \"DeploymentListMember\" ]: \"\"\"\u83b7\u53d6\u670d\u52a1\u90e8\u7f72\u5217\u8868 Args: project_id (int): \u9879\u76eeid Returns: List[DeploymentListMember]: \u670d\u52a1\u5217\u8868 \"\"\" data = { \"project_id\" : project_id } server_data = cls . _server_data ( API_URL . DEPLOY_LIST_DEPLOYMENTS , data ) # return [cls.get_deployment_detail(item[\"service_id\"]) for item in server_data] return [ DeploymentListMember ( ** item ) for item in server_data ]","title":"list_deployments()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.rename_deployment","text":"\u91cd\u547d\u540d\u670d\u52a1 Parameters: Name Type Description Default svc_id int \u670d\u52a1id required svc_name str \u65b0\u670d\u52a1\u540d\u79f0 required Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def rename_deployment ( cls , svc_id : int , svc_name : str ): \"\"\"\u91cd\u547d\u540d\u670d\u52a1 Args: svc_id (int): \u670d\u52a1id svc_name (str): \u65b0\u670d\u52a1\u540d\u79f0 Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"svc_id\" : svc_id , \"svc_name\" : svc_name } rsp = cls . _client . _patch ( API_URL . DEPLOY_RENAME_DEPLOYMENT , data ) if rsp [ 'code' ] == 200 and rsp [ 'message' ] == 'ok' : return cls . get_deployment_detail ( svc_id ) return None","title":"rename_deployment()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.Deployment.resident_deployment","text":"\u5207\u6362\u670d\u52a1\u5e38\u9a7b\u72b6\u6001 Parameters: Name Type Description Default svc_id int64 \u670d\u52a1id required min_pod int \u6700\u5c11pod\u6570\uff0c\u5927\u4e8e0\u4e3a\u670d\u52a1\u5e38\u9a7b\uff0c\u7b49\u4e8e0\u4e3a\u975e\u5e38\u9a7b required Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py @classmethod def resident_deployment ( cls , svc_id : int , min_pod : int ): \"\"\"\u5207\u6362\u670d\u52a1\u5e38\u9a7b\u72b6\u6001 Args: svc_id (int64): \u670d\u52a1id min_pod (int): \u6700\u5c11pod\u6570\uff0c\u5927\u4e8e0\u4e3a\u670d\u52a1\u5e38\u9a7b\uff0c\u7b49\u4e8e0\u4e3a\u975e\u5e38\u9a7b Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"svc_id\" : svc_id , \"min_pod\" : min_pod } rsp = cls . _client . _post ( API_URL . DEPLOY_RESIDENT_DEPLOYMENT , data ) if rsp [ 'code' ] == 200 and rsp [ 'message' ] == 'ok' : return cls . get_deployment_detail ( svc_id ) return None","title":"resident_deployment()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.DeploymentListMember","text":"DeploymentListMember(service_id: int = 0, service_name: str = '', min_pod: int = 0, model_name: str = '', trial_no: int = 0, trial_type: int = 0, recom_model: str = '', eval_metric: trafaret.base.Any = '', service_status: int = 0, service_create_time: str = '')","title":"DeploymentListMember"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.DeploymentListMember.get_deployment_detail","text":"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Returns: Type Description Deployment \u670d\u52a1\u8be6\u60c5 Source code in deepwisdom/models/deployment.py def get_deployment_detail ( self ) -> \"Deployment\" : \"\"\"\u83b7\u53d6\u670d\u52a1\u8be6\u60c5 Returns: Deployment: \u670d\u52a1\u8be6\u60c5 \"\"\" data = { \"service_id\" : self . service_id } rsp = self . _client . _get ( API_URL . DEPLOY_GET_SERVICE_DETAIL , data ) if \"data\" in rsp : checked = Deployment . _converter . check ( rsp [ 'data' ]) filtered = Deployment . _filter_data ( checked ) return Deployment ( ** filtered )","title":"get_deployment_detail()"},{"location":"API%20Reference/deployment/#deepwisdom.models.deployment.ServiceApiInfo","text":"ServiceApiInfo(http_type: str = '', token: str = '', url: str = '', post_example: trafaret.base.Any = '', data_example: trafaret.base.Any = '', response_example: trafaret.base.Any = None)","title":"ServiceApiInfo"},{"location":"API%20Reference/model/","text":"DicTableModel ( Model ) \u8868\u683c\u4e8c\u5206\u7c7b Model ( APIObject ) ModelInstance ( APIObject ) __init__ ( self , project_id , trial_no , trial_type , model_id , model_name = None ) special \u5f85\u90e8\u7f72\u7684\u6a21\u578b\u5b9e\u4f8b Parameters: Name Type Description Default project_id int required trial_no int \u5b9e\u9a8cid required trial_type int \u5b9e\u9a8c\u7c7b\u578b required model_id int \u6a21\u578bid required model_name str \u6a21\u578b\u540d\u79f0 None Source code in deepwisdom/models/model.py def __init__ ( self , project_id , trial_no , trial_type , model_id , model_name = None ): \"\"\" \u5f85\u90e8\u7f72\u7684\u6a21\u578b\u5b9e\u4f8b Args: project_id (int): trial_no (int): \u5b9e\u9a8cid trial_type (int): \u5b9e\u9a8c\u7c7b\u578b model_id (int): \u6a21\u578bid model_name (str): \u6a21\u578b\u540d\u79f0 \"\"\" self . project_id = project_id self . trial_no = trial_no self . trial_type = trial_type self . model_id = model_id self . model_name = model_name","title":"Model"},{"location":"API%20Reference/model/#deepwisdom.models.model.DicTableModel","text":"\u8868\u683c\u4e8c\u5206\u7c7b","title":"DicTableModel"},{"location":"API%20Reference/model/#deepwisdom.models.model.Model","text":"","title":"Model"},{"location":"API%20Reference/model/#deepwisdom.models.model.ModelInstance","text":"","title":"ModelInstance"},{"location":"API%20Reference/model/#deepwisdom.models.model.ModelInstance.__init__","text":"\u5f85\u90e8\u7f72\u7684\u6a21\u578b\u5b9e\u4f8b Parameters: Name Type Description Default project_id int required trial_no int \u5b9e\u9a8cid required trial_type int \u5b9e\u9a8c\u7c7b\u578b required model_id int \u6a21\u578bid required model_name str \u6a21\u578b\u540d\u79f0 None Source code in deepwisdom/models/model.py def __init__ ( self , project_id , trial_no , trial_type , model_id , model_name = None ): \"\"\" \u5f85\u90e8\u7f72\u7684\u6a21\u578b\u5b9e\u4f8b Args: project_id (int): trial_no (int): \u5b9e\u9a8cid trial_type (int): \u5b9e\u9a8c\u7c7b\u578b model_id (int): \u6a21\u578bid model_name (str): \u6a21\u578b\u540d\u79f0 \"\"\" self . project_id = project_id self . trial_no = trial_no self . trial_type = trial_type self . model_id = model_id self . model_name = model_name","title":"__init__()"},{"location":"API%20Reference/offline_prediction/","text":"\u6a21\u578b\u6570\u636e\u96c6\u9884\u6d4b OfflinePrediction ( APIObject ) dataclass OfflinePrediction(project_id: int = 0, offline_id: int = 0, ret: int = 0, status: int = 0, task_type: int = 0, models_metrics: trafaret.base.Any = None, models_metric_overview: trafaret.base.Any = None, models_plot_data: trafaret.base.Any = None, models_pred_prob: trafaret.base.Any = None, models_preview_data: trafaret.base.Any = None, models_preview_data_cols: trafaret.base.Any = None) dataset_download ( offline_id , target_path , target_cols = []) classmethod \u79bb\u7ebf\u9884\u6d4b\u6570\u636e\u96c6\u4e0b\u8f7d\uff0c\u6682\u65f6\u4e0d\u53ef\u7528 TODO Parameters: Name Type Description Default offline_id int \u9884\u6d4b\u6570\u636e\u96c6id required target_path str \u4e0b\u8f7d\u8def\u5f84 required target_cols List[str] \u6570\u636e\u5217\u9009\u62e9,\u9ed8\u8ba4\u4e3a\u7a7a[] [] Returns: Type Description str \u6570\u636e\u96c6\u5730\u5740 Source code in deepwisdom/models/offline_predictions.py @classmethod def dataset_download ( cls , offline_id : int , target_path : str , target_cols : List [ str ] = []): \"\"\"\u79bb\u7ebf\u9884\u6d4b\u6570\u636e\u96c6\u4e0b\u8f7d\uff0c\u6682\u65f6\u4e0d\u53ef\u7528 TODO Args: offline_id (int): \u9884\u6d4b\u6570\u636e\u96c6id target_path (str): \u4e0b\u8f7d\u8def\u5f84 target_cols (List[str]): \u6570\u636e\u5217\u9009\u62e9,\u9ed8\u8ba4\u4e3a\u7a7a[] Returns: str: \u6570\u636e\u96c6\u5730\u5740 \"\"\" data = { \"offline_id\" : offline_id , \"dataset_id\" : target_cols , } rsp = cls . _client . _get ( API_URL . PREDICTION_DATASET_DOWNLOAD , data ) if \"data\" in rsp : # pass # return rsp['data'] fi = cls . _client . _get ( cls . join_dataset_download_path ( rsp [ 'data' ]), {}) out = open ( target_path , \"w+\" ) out . write ( fi ) out . close () return None delete_predictions ( offline_ids ) classmethod \u6279\u91cf\u5220\u9664\u9884\u6d4b Parameters: Name Type Description Default offline_ids List[int] \u79bb\u7ebf\u9884\u6d4bid\u6570\u7ec4 required Source code in deepwisdom/models/offline_predictions.py @classmethod def delete_predictions ( cls , offline_ids : List [ int ]): \"\"\"\u6279\u91cf\u5220\u9664\u9884\u6d4b Args: offline_ids (List[int]): \u79bb\u7ebf\u9884\u6d4bid\u6570\u7ec4 \"\"\" data = { \"offline_ids\" : offline_ids } rsp = cls . _client . _post ( API_URL . PREDICTION_DELETE , data ) if \"data\" in rsp : return rsp [ 'data' ] return None get_predict_detail ( offline_id ) classmethod \u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Parameters: Name Type Description Default offline_id int64 \u79bb\u7ebf\u9884\u6d4bid required Returns: Type Description OfflinePrediction \u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Source code in deepwisdom/models/offline_predictions.py @classmethod def get_predict_detail ( cls , offline_id : int ) -> 'OfflinePrediction' : \"\"\"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Args: offline_id (int64): \u79bb\u7ebf\u9884\u6d4bid Returns: OfflinePrediction: \u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 \"\"\" data = { \"offline_id\" : offline_id , } rsp = cls . _server_data ( API_URL . PREDICTION_DETAIL , data ) if rsp : rsp [ 'offline_id' ] = offline_id checked = OfflinePrediction . _converter . check ( rsp ) filtered = OfflinePrediction . _filter_data ( checked ) return OfflinePrediction ( ** filtered ) get_predict_status ( self ) \u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u72b6\u6001 Returns: Type Description Int \u670d\u52a1\u72b6\u6001\uff1a1-\u9884\u6d4b\u4e2d\uff0c2-\u9884\u6d4b\u5b8c\u6210\uff0c3-\u9884\u6d4b\u5931\u8d25 Source code in deepwisdom/models/offline_predictions.py def get_predict_status ( self ) -> Int : \"\"\"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u72b6\u6001 Returns: Int: \u670d\u52a1\u72b6\u6001\uff1a1-\u9884\u6d4b\u4e2d\uff0c2-\u9884\u6d4b\u5b8c\u6210\uff0c3-\u9884\u6d4b\u5931\u8d25 \"\"\" data = { \"offline_id\" : self . offline_id , } rsp = self . _server_data ( API_URL . PREDICTION_DETAIL , data ) if rsp : rsp [ 'offline_id' ] = self . offline_id checked = self . _converter . check ( rsp ) filtered = self . _filter_data ( checked ) if rsp [ 'ret' ] == - 1 : rsp [ 'status' ] = 3 self . from_server_data ( filtered ) return self . status return Int ( 0 ) list_predictions ( project_id ) classmethod \u83b7\u53d6\u9884\u6d4b\u5217\u8868 Parameters: Name Type Description Default project_id uint64 \u9879\u76eeid required Source code in deepwisdom/models/offline_predictions.py @classmethod def list_predictions ( cls , project_id : int ) -> List [ 'OfflinePredictionListMember' ]: \"\"\"\u83b7\u53d6\u9884\u6d4b\u5217\u8868 Args: project_id (uint64): \u9879\u76eeid \"\"\" data = { \"project_id\" : project_id , } server_data = cls . _server_data ( API_URL . PREDICTION_LIST , data ) init_data = [ dict ( OfflinePredictionListMember . _safe_data ( item )) for item in server_data ] return [ OfflinePredictionListMember ( ** data ) for data in init_data ] predict ( model_inst_id , dataset_id ) classmethod \u5f00\u59cb\u79bb\u7ebf\u9884\u6d4b Returns: Type Description OfflinePrediction \u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b Source code in deepwisdom/models/offline_predictions.py @classmethod def predict ( cls , model_inst_id : int , dataset_id : int ) -> \"OfflinePrediction\" : \"\"\"\u5f00\u59cb\u79bb\u7ebf\u9884\u6d4b Returns: OfflinePrediction: \u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b \"\"\" data = { \"model_inst_id\" : model_inst_id , \"dataset_id\" : dataset_id , } rsp = cls . _client . _post ( API_URL . PREDICTION_PREDICT , data ) if \"data\" in rsp and rsp [ 'data' ][ 'offline_id' ]: return cls . get_predict_detail ( rsp [ 'data' ][ 'offline_id' ]) return None result_download ( project_id , target_path ) classmethod \u9879\u76ee\u9884\u6d4b\u62a5\u544a\u4e0b\u8f7d,\u5f53\u524d\u7531\u524d\u7aef\u6e32\u67d3\u540e\u4e0b\u8f7d\uff0c\u6682\u65f6\u4e0d\u652f\u6301\u670d\u52a1\u7aef\u76f4\u63a5\u4e0b\u8f7d TODO Parameters: Name Type Description Default project_id int64 \u9879\u76eeid required Source code in deepwisdom/models/offline_predictions.py @classmethod def result_download ( cls , project_id : int , target_path : str ): \"\"\"\u9879\u76ee\u9884\u6d4b\u62a5\u544a\u4e0b\u8f7d,\u5f53\u524d\u7531\u524d\u7aef\u6e32\u67d3\u540e\u4e0b\u8f7d\uff0c\u6682\u65f6\u4e0d\u652f\u6301\u670d\u52a1\u7aef\u76f4\u63a5\u4e0b\u8f7d TODO Args: project_id (int64): \u9879\u76eeid \"\"\" data = { \"project_id\" : project_id , } rsp = cls . _client . _get ( API_URL . PREDICTION_RESULT_DOWNLOAD , data ) if \"data\" in rsp and \"zip_name\" in rsp [ \"data\" ]: print ( rsp ) report = cls . _client . _get ( rsp [ 'data' ][ \"zip_name\" ], {}) out = open ( target_path , \"w+\" ) out . write ( report ) out . close () return None wait_for_result ( self ) \u7b49\u5f85\u9884\u6d4b\u7ed3\u679c Returns: Type Description OfflinePredictionDetail \u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b Source code in deepwisdom/models/offline_predictions.py def wait_for_result ( self ): \"\"\"\u7b49\u5f85\u9884\u6d4b\u7ed3\u679c Returns: OfflinePredictionDetail: \u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b \"\"\" status = self . get_predict_status () while status == 1 : status = self . get_predict_status () time . sleep ( 3 ) return self OfflinePredictionListMember ( APIObject ) dataclass OfflinePredictionListMember(offline_id: int = 0, offline_status: int = 0, dataset_name: str = '', dataset_id: int = 0, model_inst_id: int = 0) get_predict_detail ( self ) \u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Parameters: Name Type Description Default offline_id int64 \u79bb\u7ebf\u9884\u6d4bid required Returns: Type Description OfflinePredictionDetail \u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Source code in deepwisdom/models/offline_predictions.py def get_predict_detail ( self ) -> 'OfflinePrediction' : \"\"\"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Args: offline_id (int64): \u79bb\u7ebf\u9884\u6d4bid Returns: OfflinePredictionDetail: \u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 \"\"\" data = { \"offline_id\" : self . offline_id , } rsp = self . _server_data ( API_URL . PREDICTION_DETAIL , data ) if rsp : rsp [ 'offline_id' ] = self . offline_id checked = OfflinePrediction . _converter . check ( rsp ) filtered = OfflinePrediction . _filter_data ( checked ) return OfflinePrediction ( ** filtered )","title":"Offline prediction"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction","text":"OfflinePrediction(project_id: int = 0, offline_id: int = 0, ret: int = 0, status: int = 0, task_type: int = 0, models_metrics: trafaret.base.Any = None, models_metric_overview: trafaret.base.Any = None, models_plot_data: trafaret.base.Any = None, models_pred_prob: trafaret.base.Any = None, models_preview_data: trafaret.base.Any = None, models_preview_data_cols: trafaret.base.Any = None)","title":"OfflinePrediction"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction.dataset_download","text":"\u79bb\u7ebf\u9884\u6d4b\u6570\u636e\u96c6\u4e0b\u8f7d\uff0c\u6682\u65f6\u4e0d\u53ef\u7528 TODO Parameters: Name Type Description Default offline_id int \u9884\u6d4b\u6570\u636e\u96c6id required target_path str \u4e0b\u8f7d\u8def\u5f84 required target_cols List[str] \u6570\u636e\u5217\u9009\u62e9,\u9ed8\u8ba4\u4e3a\u7a7a[] [] Returns: Type Description str \u6570\u636e\u96c6\u5730\u5740 Source code in deepwisdom/models/offline_predictions.py @classmethod def dataset_download ( cls , offline_id : int , target_path : str , target_cols : List [ str ] = []): \"\"\"\u79bb\u7ebf\u9884\u6d4b\u6570\u636e\u96c6\u4e0b\u8f7d\uff0c\u6682\u65f6\u4e0d\u53ef\u7528 TODO Args: offline_id (int): \u9884\u6d4b\u6570\u636e\u96c6id target_path (str): \u4e0b\u8f7d\u8def\u5f84 target_cols (List[str]): \u6570\u636e\u5217\u9009\u62e9,\u9ed8\u8ba4\u4e3a\u7a7a[] Returns: str: \u6570\u636e\u96c6\u5730\u5740 \"\"\" data = { \"offline_id\" : offline_id , \"dataset_id\" : target_cols , } rsp = cls . _client . _get ( API_URL . PREDICTION_DATASET_DOWNLOAD , data ) if \"data\" in rsp : # pass # return rsp['data'] fi = cls . _client . _get ( cls . join_dataset_download_path ( rsp [ 'data' ]), {}) out = open ( target_path , \"w+\" ) out . write ( fi ) out . close () return None","title":"dataset_download()"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction.delete_predictions","text":"\u6279\u91cf\u5220\u9664\u9884\u6d4b Parameters: Name Type Description Default offline_ids List[int] \u79bb\u7ebf\u9884\u6d4bid\u6570\u7ec4 required Source code in deepwisdom/models/offline_predictions.py @classmethod def delete_predictions ( cls , offline_ids : List [ int ]): \"\"\"\u6279\u91cf\u5220\u9664\u9884\u6d4b Args: offline_ids (List[int]): \u79bb\u7ebf\u9884\u6d4bid\u6570\u7ec4 \"\"\" data = { \"offline_ids\" : offline_ids } rsp = cls . _client . _post ( API_URL . PREDICTION_DELETE , data ) if \"data\" in rsp : return rsp [ 'data' ] return None","title":"delete_predictions()"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction.get_predict_detail","text":"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Parameters: Name Type Description Default offline_id int64 \u79bb\u7ebf\u9884\u6d4bid required Returns: Type Description OfflinePrediction \u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Source code in deepwisdom/models/offline_predictions.py @classmethod def get_predict_detail ( cls , offline_id : int ) -> 'OfflinePrediction' : \"\"\"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Args: offline_id (int64): \u79bb\u7ebf\u9884\u6d4bid Returns: OfflinePrediction: \u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 \"\"\" data = { \"offline_id\" : offline_id , } rsp = cls . _server_data ( API_URL . PREDICTION_DETAIL , data ) if rsp : rsp [ 'offline_id' ] = offline_id checked = OfflinePrediction . _converter . check ( rsp ) filtered = OfflinePrediction . _filter_data ( checked ) return OfflinePrediction ( ** filtered )","title":"get_predict_detail()"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction.get_predict_status","text":"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u72b6\u6001 Returns: Type Description Int \u670d\u52a1\u72b6\u6001\uff1a1-\u9884\u6d4b\u4e2d\uff0c2-\u9884\u6d4b\u5b8c\u6210\uff0c3-\u9884\u6d4b\u5931\u8d25 Source code in deepwisdom/models/offline_predictions.py def get_predict_status ( self ) -> Int : \"\"\"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u72b6\u6001 Returns: Int: \u670d\u52a1\u72b6\u6001\uff1a1-\u9884\u6d4b\u4e2d\uff0c2-\u9884\u6d4b\u5b8c\u6210\uff0c3-\u9884\u6d4b\u5931\u8d25 \"\"\" data = { \"offline_id\" : self . offline_id , } rsp = self . _server_data ( API_URL . PREDICTION_DETAIL , data ) if rsp : rsp [ 'offline_id' ] = self . offline_id checked = self . _converter . check ( rsp ) filtered = self . _filter_data ( checked ) if rsp [ 'ret' ] == - 1 : rsp [ 'status' ] = 3 self . from_server_data ( filtered ) return self . status return Int ( 0 )","title":"get_predict_status()"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction.list_predictions","text":"\u83b7\u53d6\u9884\u6d4b\u5217\u8868 Parameters: Name Type Description Default project_id uint64 \u9879\u76eeid required Source code in deepwisdom/models/offline_predictions.py @classmethod def list_predictions ( cls , project_id : int ) -> List [ 'OfflinePredictionListMember' ]: \"\"\"\u83b7\u53d6\u9884\u6d4b\u5217\u8868 Args: project_id (uint64): \u9879\u76eeid \"\"\" data = { \"project_id\" : project_id , } server_data = cls . _server_data ( API_URL . PREDICTION_LIST , data ) init_data = [ dict ( OfflinePredictionListMember . _safe_data ( item )) for item in server_data ] return [ OfflinePredictionListMember ( ** data ) for data in init_data ]","title":"list_predictions()"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction.predict","text":"\u5f00\u59cb\u79bb\u7ebf\u9884\u6d4b Returns: Type Description OfflinePrediction \u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b Source code in deepwisdom/models/offline_predictions.py @classmethod def predict ( cls , model_inst_id : int , dataset_id : int ) -> \"OfflinePrediction\" : \"\"\"\u5f00\u59cb\u79bb\u7ebf\u9884\u6d4b Returns: OfflinePrediction: \u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b \"\"\" data = { \"model_inst_id\" : model_inst_id , \"dataset_id\" : dataset_id , } rsp = cls . _client . _post ( API_URL . PREDICTION_PREDICT , data ) if \"data\" in rsp and rsp [ 'data' ][ 'offline_id' ]: return cls . get_predict_detail ( rsp [ 'data' ][ 'offline_id' ]) return None","title":"predict()"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction.result_download","text":"\u9879\u76ee\u9884\u6d4b\u62a5\u544a\u4e0b\u8f7d,\u5f53\u524d\u7531\u524d\u7aef\u6e32\u67d3\u540e\u4e0b\u8f7d\uff0c\u6682\u65f6\u4e0d\u652f\u6301\u670d\u52a1\u7aef\u76f4\u63a5\u4e0b\u8f7d TODO Parameters: Name Type Description Default project_id int64 \u9879\u76eeid required Source code in deepwisdom/models/offline_predictions.py @classmethod def result_download ( cls , project_id : int , target_path : str ): \"\"\"\u9879\u76ee\u9884\u6d4b\u62a5\u544a\u4e0b\u8f7d,\u5f53\u524d\u7531\u524d\u7aef\u6e32\u67d3\u540e\u4e0b\u8f7d\uff0c\u6682\u65f6\u4e0d\u652f\u6301\u670d\u52a1\u7aef\u76f4\u63a5\u4e0b\u8f7d TODO Args: project_id (int64): \u9879\u76eeid \"\"\" data = { \"project_id\" : project_id , } rsp = cls . _client . _get ( API_URL . PREDICTION_RESULT_DOWNLOAD , data ) if \"data\" in rsp and \"zip_name\" in rsp [ \"data\" ]: print ( rsp ) report = cls . _client . _get ( rsp [ 'data' ][ \"zip_name\" ], {}) out = open ( target_path , \"w+\" ) out . write ( report ) out . close () return None","title":"result_download()"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePrediction.wait_for_result","text":"\u7b49\u5f85\u9884\u6d4b\u7ed3\u679c Returns: Type Description OfflinePredictionDetail \u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b Source code in deepwisdom/models/offline_predictions.py def wait_for_result ( self ): \"\"\"\u7b49\u5f85\u9884\u6d4b\u7ed3\u679c Returns: OfflinePredictionDetail: \u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b \"\"\" status = self . get_predict_status () while status == 1 : status = self . get_predict_status () time . sleep ( 3 ) return self","title":"wait_for_result()"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePredictionListMember","text":"OfflinePredictionListMember(offline_id: int = 0, offline_status: int = 0, dataset_name: str = '', dataset_id: int = 0, model_inst_id: int = 0)","title":"OfflinePredictionListMember"},{"location":"API%20Reference/offline_prediction/#deepwisdom.models.offline_predictions.OfflinePredictionListMember.get_predict_detail","text":"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Parameters: Name Type Description Default offline_id int64 \u79bb\u7ebf\u9884\u6d4bid required Returns: Type Description OfflinePredictionDetail \u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Source code in deepwisdom/models/offline_predictions.py def get_predict_detail ( self ) -> 'OfflinePrediction' : \"\"\"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 Args: offline_id (int64): \u79bb\u7ebf\u9884\u6d4bid Returns: OfflinePredictionDetail: \u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 \"\"\" data = { \"offline_id\" : self . offline_id , } rsp = self . _server_data ( API_URL . PREDICTION_DETAIL , data ) if rsp : rsp [ 'offline_id' ] = self . offline_id checked = OfflinePrediction . _converter . check ( rsp ) filtered = OfflinePrediction . _filter_data ( checked ) return OfflinePrediction ( ** filtered )","title":"get_predict_detail()"},{"location":"API%20Reference/project/","text":"AdvanceSetting ( dict ) dataclass AdvanceSetting(gp_switch: = None, optimizer: = None, random_seed: int = None, target_train: deepwisdom.models.project.TrainSetting = None) Project ( APIObject ) __init__ ( self , project_id , name = None , user_id = None , model_type = None , task_type = None , description = None , status = None ) special \u9879\u76ee\u62bd\u8c61\u7c7b Parameters: Name Type Description Default project_id int required name str None user_id int None model_type int None task_type int None description str None status int None Source code in deepwisdom/models/project.py def __init__ ( self , project_id , name = None , user_id = None , model_type = None , task_type = None , description = None , status = None , ): \"\"\" \u9879\u76ee\u62bd\u8c61\u7c7b Args: project_id (int): name (str): user_id (int): model_type (int): task_type (int): description (str): status (int): \"\"\" self . project_id = project_id self . name = name self . user_id = user_id self . model_type = model_type self . task_type = task_type self . description = description self . status = status check_train_finish ( self ) \u68c0\u67e5\u8bad\u7ec3\u662f\u5426\u5b8c\u6210 Returns: Type Description True \u5b8c\u6210 False: \u672a\u5b8c\u6210 Source code in deepwisdom/models/project.py def check_train_finish ( self ): \"\"\" \u68c0\u67e5\u8bad\u7ec3\u662f\u5426\u5b8c\u6210 Returns: True:\u5b8c\u6210 False: \u672a\u5b8c\u6210 \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_INFO , data ) logging . info ( server_data ) if \"ret\" in server_data and server_data [ \"ret\" ] != 1 : logging . error ( server_data ) raise err . GetProjectInfoError # \u8bad\u7ec3\u6210\u529f if server_data [ \"status\" ] == 2 : return True # \u8bad\u7ec3\u5931\u8d25 if server_data [ \"status\" ] == 3 : raise err . ProjectTrainError return False create_from_dataset ( dataset_id , name = None , model_type = None , task_type = None , description = None , scene = None , primary_label = None , primary_main_time_col = None , id_cols = None , table_relation = None , advance_settings = None , search_space_id = 1 , icon = '{\"name\": \"IconBangong\", \"label\": \"\u529e\u516c\"}' ) classmethod \u4ece\u73b0\u6709\u7684\u6570\u636e\u96c6\u521b\u5efa\u9879\u76ee Parameters: Name Type Description Default dataset_id int \u6570\u636e\u96c6id required name str \u9879\u76ee\u540d None model_type int \u6a21\u6001\u7c7b\u578b\u3002 0CSV,1VIDEO,2IMAGE,3SPEECH,4TEXT None task_type int \u4efb\u52a1\u7c7b\u578b\u30020\u4e8c\u5206\u7c7b/\u5206\u7c7b,1\u591a\u5206\u7c7b/\u68c0\u6d4b/\u610f\u56fe\u8bc6\u522b/\u5339\u914d,2\u56de\u5f52/\u5b9a\u4f4d/\u8bed\u97f3\u5206\u79bb/\u5e8f\u5217,3\u65f6\u5e8f/\u5206\u9694 None description str \u9879\u76ee\u63cf\u8ff0 None scene int \u573a\u666f\u6807\u7b7e\u3002 \u679a\u4e3e None primary_label str \u9884\u6d4b\u5217 None primary_main_time_col str \u65f6\u95f4\u5217 None id_cols str id\u5217 None table_relation str \u8868\u5173\u7cfb None advance_settings AdvanceSetting \u9ad8\u7ea7 None search_space_id int \u641c\u7d22\u7a7a\u95f4id 1 icon str '{\"name\": \"IconBangong\", \"label\": \"\u529e\u516c\"}' Returns: Type Description Project Source code in deepwisdom/models/project.py @classmethod def create_from_dataset ( cls , dataset_id , name = None , model_type = None , task_type = None , description = None , scene = None , primary_label = None , primary_main_time_col = None , id_cols = None , table_relation = None , advance_settings : Optional [ AdvanceSetting ] = None , search_space_id = 1 , icon = '{\"name\": \"IconBangong\", \"label\": \"\u529e\u516c\"}' ): \"\"\" \u4ece\u73b0\u6709\u7684\u6570\u636e\u96c6\u521b\u5efa\u9879\u76ee Args: dataset_id (int): \u6570\u636e\u96c6id name (str): \u9879\u76ee\u540d model_type (int): \u6a21\u6001\u7c7b\u578b\u3002 0CSV,1VIDEO,2IMAGE,3SPEECH,4TEXT task_type (int): \u4efb\u52a1\u7c7b\u578b\u30020\u4e8c\u5206\u7c7b/\u5206\u7c7b,1\u591a\u5206\u7c7b/\u68c0\u6d4b/\u610f\u56fe\u8bc6\u522b/\u5339\u914d,2\u56de\u5f52/\u5b9a\u4f4d/\u8bed\u97f3\u5206\u79bb/\u5e8f\u5217,3\u65f6\u5e8f/\u5206\u9694 description (str): \u9879\u76ee\u63cf\u8ff0 scene (int): \u573a\u666f\u6807\u7b7e\u3002 \u679a\u4e3e primary_label (str): \u9884\u6d4b\u5217 primary_main_time_col (str): \u65f6\u95f4\u5217 id_cols (str): id\u5217 table_relation (str): \u8868\u5173\u7cfb advance_settings (AdvanceSetting): \u9ad8\u7ea7 search_space_id (int): \u641c\u7d22\u7a7a\u95f4id icon (str): Returns: Project \"\"\" proj_data = {} proj_data [ \"modal_type\" ] = model_type proj_data [ \"name\" ] = \"SDK_PROJ_\" + str ( dataset_id + time . time ()) if name is not None : proj_data [ \"name\" ] = name proj_data [ \"task_type\" ] = task_type # \u4efb\u52a1\u63cf\u8ff0 proj_data [ \"description\" ] = description proj_data [ \"scene\" ] = scene proj_data [ \"primary_label\" ] = primary_label proj_data [ \"primary_main_time_col\" ] = primary_main_time_col proj_data [ \"id_cols\" ] = id_cols proj_data [ \"table_relation\" ] = json . dumps ({ \"primary_table\" : dataset_id , \"secondary_tables\" : []}) settings = deepcopy ( PROJECT_DEFAULT_ADVANCE_SETTING ) advance_settings = advance_settings or {} settings . update ( advance_settings ) proj_data [ \"advance_settings\" ] = json . dumps ( settings ) proj_data [ \"search_space_id\" ] = search_space_id proj_data [ \"icon\" ] = icon resp = cls . _client . _post ( API_URL . PROJECT_CREATE , proj_data ) if resp [ \"code\" ] != 200 or \"data\" in resp and \"ret\" in resp [ \"data\" ] and resp [ \"data\" ][ \"ret\" ] != 1 : raise err . ServerError ( resp , resp [ \"code\" ]) proj_id = resp [ \"data\" ][ \"new_project_info\" ][ 0 ][ \"id\" ] data = { \"project_id\" : proj_id } server_data = cls . _server_data ( API_URL . PROJECT_INFO , data ) return cls . from_server_data ( server_data ) create_from_id ( proj_id ) classmethod \u76f4\u63a5\u4ece\u9879\u76eeid\u521b\u5efa\u9879\u76ee\u5bf9\u8c61 Parameters: Name Type Description Default proj_id int required Source code in deepwisdom/models/project.py @classmethod def create_from_id ( cls , proj_id : int ): \"\"\" \u76f4\u63a5\u4ece\u9879\u76eeid\u521b\u5efa\u9879\u76ee\u5bf9\u8c61 Args: proj_id (int): Returns: \"\"\" data = { \"project_id\" : proj_id } server_data = cls . _server_data ( API_URL . PROJECT_INFO , data ) return cls . from_server_data ( server_data ) dataset_list ( self ) \u9879\u76ee\u7ed1\u5b9a\u7684\u6570\u636e\u96c6\u5217\u8868 Source code in deepwisdom/models/project.py def dataset_list ( self ): \"\"\" \u9879\u76ee\u7ed1\u5b9a\u7684\u6570\u636e\u96c6\u5217\u8868 Returns: \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_DATASET_LIST , data ) return server_data delete ( proj_ids ) classmethod Parameters: Name Type Description Default proj_ids list required Source code in deepwisdom/models/project.py @classmethod def delete ( cls , proj_ids : list ): \"\"\" Args: proj_ids (list): Returns: \"\"\" data = { \"project_id\" : proj_ids } cls . _client . _delete ( API_URL . PROJECT_DELETE , data ) get_select_models ( self , trial_no , trial_type ) \u9700\u8981\u90e8\u7f72\u7684\u6a21\u578b\u4fe1\u606f Parameters: Name Type Description Default trial_no int required trial_type int required Returns: Type Description []ModelInstance Source code in deepwisdom/models/project.py def get_select_models ( self , trial_no : int , trial_type : int ): \"\"\" \u9700\u8981\u90e8\u7f72\u7684\u6a21\u578b\u4fe1\u606f Args: trial_no (int): trial_type (int): Returns: []ModelInstance \"\"\" data = { \"project_id\" : self . project_id , \"trial_no\" : trial_no , \"trial_type\" : trial_type } server_data = self . _server_data ( API_URL . PROJECT_MODEL_SELECT , data ) init_data = [ dict ( ModelInstance . _safe_data ( item )) for item in server_data ] return [ ModelInstance ( project_id = self . project_id , trial_no = trial_no , trial_type = trial_type , ** data ) for data in init_data ] model_list ( self ) Source code in deepwisdom/models/project.py def model_list ( self ): \"\"\" Returns: \"\"\" offline_prediction_list ( self ) \u83b7\u53d6\u9879\u76ee\u7684\u9884\u6d4b\u5217\u8868 Parameters: Name Type Description Default project_id uint64 \u9879\u76eeid required Source code in deepwisdom/models/project.py def offline_prediction_list ( self ) -> List [ OfflinePredictionListMember ]: \"\"\"\u83b7\u53d6\u9879\u76ee\u7684\u9884\u6d4b\u5217\u8868 Args: project_id (uint64): \u9879\u76eeid \"\"\" data = { \"project_id\" : self . project_id , } server_data = self . _server_data ( API_URL . PREDICTION_LIST , data ) init_data = [ OfflinePredictionListMember . _filter_data ( OfflinePredictionListMember . _converter . check ( item )) for item in server_data ] return [ OfflinePredictionListMember ( ** data ) for data in init_data ] predict_dataset_list ( self ) \u79bb\u7ebf\u9884\u6d4b\u6570\u636e\u96c6\u5217\u8868 Source code in deepwisdom/models/project.py def predict_dataset_list ( self ): \"\"\" \u79bb\u7ebf\u9884\u6d4b\u6570\u636e\u96c6\u5217\u8868 Returns: \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . DATASET_PREDICT_LIST , data ) init_data = [ dict ( PredictDataset . _safe_data ( item )) for item in server_data ] return [ PredictDataset ( project_id = self . project_id , ** data ) for data in init_data ] predict_file ( self , model_id , filename ) \u9884\u6d4b\u6587\u4ef6 Returns: Type Description OfflinePrediction \u79bb\u7ebf\u9884\u6d4b\u5bf9\u8c61 Source code in deepwisdom/models/project.py def predict_file ( self , model_id : int , filename ) -> OfflinePrediction : \"\"\"\u9884\u6d4b\u6587\u4ef6 Returns: OfflinePrediction: \u79bb\u7ebf\u9884\u6d4b\u5bf9\u8c61 \"\"\" dataset = self . upload_predict_dataset ( filename ) if not dataset : return None prediction = OfflinePrediction . predict ( model_id , dataset . dataset_id ) return prediction recommended_select_model ( self ) \u83b7\u53d6\u63a8\u8350\u7684\u6a21\u578b Returns: Type Description ModelInstance Source code in deepwisdom/models/project.py def recommended_select_model ( self ): \"\"\" \u83b7\u53d6\u63a8\u8350\u7684\u6a21\u578b Returns: ModelInstance \"\"\" solutions = self . solution_list () try : models = self . get_select_models ( solutions [ 0 ] . trial_no , solutions [ 0 ] . trial_type ) return models [ 0 ] except IndexError : logging . error ( \"no found\" ) return None retrain ( self ) \u91cd\u65b0\u8bad\u7ec3 Source code in deepwisdom/models/project.py def retrain ( self ): \"\"\" \u91cd\u65b0\u8bad\u7ec3 Returns: \"\"\" data = { \"project_id\" : self . project_id } self . _client . _patch ( API_URL . PROJECT_TRAIN , data ) service_list ( self ) \u83b7\u53d6\u9879\u76ee\u7684\u670d\u52a1\u5217\u8868 Returns: Type Description List[DeploymentInfo] \u670d\u52a1\u5217\u8868 Source code in deepwisdom/models/project.py def service_list ( self ) -> List [ DeploymentListMember ]: \"\"\" \u83b7\u53d6\u9879\u76ee\u7684\u670d\u52a1\u5217\u8868 Returns: List[DeploymentInfo]: \u670d\u52a1\u5217\u8868 \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . DEPLOY_LIST_DEPLOYMENTS , data ) init_data = [ DeploymentListMember . _filter_data ( DeploymentListMember . _converter . check ( item )) for item in server_data ] return [ DeploymentListMember ( ** data ) for data in init_data ] solution_list ( self ) \u9879\u76ee\u65b9\u6848\u5217\u8868 Returns: Type Description []Solution Source code in deepwisdom/models/project.py def solution_list ( self ): \"\"\" \u9879\u76ee\u65b9\u6848\u5217\u8868 Returns: []Solution \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_SCHEME , data ) solution_list = server_data [ \"scheme\" ] init_data = [ dict ( Solution . _safe_data ( item )) for item in solution_list ] return [ Solution ( project_id = self . project_id , ** data ) for data in init_data ] terminate_train ( self ) \u7ec8\u6b62\u8bad\u7ec3\uff0c /project/terminate/train Source code in deepwisdom/models/project.py def terminate_train ( self ): \"\"\" \u7ec8\u6b62\u8bad\u7ec3\uff0c /project/terminate/train Returns: \"\"\" data = { \"project_id\" : self . project_id } self . _client . _post ( API_URL . PROJECT_TERMINATE_TRAIN , data ) train ( self ) \u5f00\u59cb\u8bad\u7ec3 Source code in deepwisdom/models/project.py def train ( self ): \"\"\" \u5f00\u59cb\u8bad\u7ec3 Returns: \"\"\" data = { \"project_id\" : self . project_id } self . _client . _post ( API_URL . PROJECT_TRAIN , data ) return trial_list ( self ) \u83b7\u53d6\u9879\u76ee\u7684\u5b9e\u9a8c\u5217\u8868 Returns: Type Description []Trial Source code in deepwisdom/models/project.py def trial_list ( self ): \"\"\" \u83b7\u53d6\u9879\u76ee\u7684\u5b9e\u9a8c\u5217\u8868 Returns: []Trial \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_EFFECT , data ) trials = server_data [ \"scheme_data\" ] init_data = [ dict ( Trial . _safe_data ( item )) for item in trials ] return [ Trial ( project_id = self . project_id , ** data ) for data in init_data ] update_advance_settings ( self , advance_settings ) \u9879\u76ee\u9ad8\u7ea7\u8bbe\u7f6e\u66f4\u65b0 Source code in deepwisdom/models/project.py def update_advance_settings ( self , advance_settings : Optional [ AdvanceSetting ]): \"\"\" \u9879\u76ee\u9ad8\u7ea7\u8bbe\u7f6e\u66f4\u65b0 Returns: \"\"\" settings = deepcopy ( PROJECT_DEFAULT_ADVANCE_SETTING ) advance_settings = advance_settings or {} settings . update ( advance_settings ) data = { \"project_id\" : self . project_id , \"advance_settings\" : json . dumps ( settings ) } self . _client . _patch ( API_URL . PROJECT_ADVANCESETTING_UPDATE , data ) upload_predict_dataset ( self , filename = None ) Parameters: Name Type Description Default filename str None Source code in deepwisdom/models/project.py def upload_predict_dataset ( self , filename = None ): \"\"\" Args: filename (str): Returns: \"\"\" data = { \"project_id\" : self . project_id } file_type = os . path . splitext ( filename )[ - 1 ][ 1 :] if file_type == \"csv\" or file_type == \"txt\" : mime_type = 'text/csv' else : mime_type = 'application/octet-stream' with open ( filename , 'rb' ) as f : files = { \"file\" : ( os . path . basename ( filename ), f , mime_type ) } response = self . _client . _upload ( API_URL . DATASET_PREDICT_UPLOAD , data , files ) dataset = dict ( PredictDataset . _safe_data ( response [ \"data\" ])) return PredictDataset ( project_id = self . project_id , ** dataset ) wait_train ( self ) \u8bad\u7ec3\uff0c\u5e76\u7b49\u5f85\u8bad\u7ec3\u5b8c\u6210 Source code in deepwisdom/models/project.py def wait_train ( self ): \"\"\" \u8bad\u7ec3\uff0c\u5e76\u7b49\u5f85\u8bad\u7ec3\u5b8c\u6210 Returns: \"\"\" self . train () # \u8f6e\u8be2\u67e5\u8be2\u8bad\u7ec3\u8fdb\u5ea6, 5s\u4e00\u6b21 while True : data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_INFO , data ) logging . info ( server_data ) if \"ret\" in server_data and server_data [ \"ret\" ] != 1 : logging . error ( server_data ) raise err . GetProjectInfoError # \u8bad\u7ec3\u6210\u529f if server_data [ \"status\" ] == 2 : self . status = server_data [ \"status\" ] break # \u8bad\u7ec3\u5931\u8d25 if server_data [ \"status\" ] == 3 : raise err . ProjectTrainError time . sleep ( 5 ) return TableRelation TrainSetting ( dict ) dataclass TrainSetting(train_data_ratio: int = 80, training_program: = '\u6307\u6807\u4f18\u5148', call_limit: List[int] = None, instance_num: int = 2, call_delay: int = 50, gpu_mem: int = 0, memory_limit: int = 20, max_trials: int = 30, trial_concurrency: int = 3, random_seed: int = 1647)","title":"Project"},{"location":"API%20Reference/project/#deepwisdom.models.project.AdvanceSetting","text":"AdvanceSetting(gp_switch: = None, optimizer: = None, random_seed: int = None, target_train: deepwisdom.models.project.TrainSetting = None)","title":"AdvanceSetting"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project","text":"","title":"Project"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.__init__","text":"\u9879\u76ee\u62bd\u8c61\u7c7b Parameters: Name Type Description Default project_id int required name str None user_id int None model_type int None task_type int None description str None status int None Source code in deepwisdom/models/project.py def __init__ ( self , project_id , name = None , user_id = None , model_type = None , task_type = None , description = None , status = None , ): \"\"\" \u9879\u76ee\u62bd\u8c61\u7c7b Args: project_id (int): name (str): user_id (int): model_type (int): task_type (int): description (str): status (int): \"\"\" self . project_id = project_id self . name = name self . user_id = user_id self . model_type = model_type self . task_type = task_type self . description = description self . status = status","title":"__init__()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.check_train_finish","text":"\u68c0\u67e5\u8bad\u7ec3\u662f\u5426\u5b8c\u6210 Returns: Type Description True \u5b8c\u6210 False: \u672a\u5b8c\u6210 Source code in deepwisdom/models/project.py def check_train_finish ( self ): \"\"\" \u68c0\u67e5\u8bad\u7ec3\u662f\u5426\u5b8c\u6210 Returns: True:\u5b8c\u6210 False: \u672a\u5b8c\u6210 \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_INFO , data ) logging . info ( server_data ) if \"ret\" in server_data and server_data [ \"ret\" ] != 1 : logging . error ( server_data ) raise err . GetProjectInfoError # \u8bad\u7ec3\u6210\u529f if server_data [ \"status\" ] == 2 : return True # \u8bad\u7ec3\u5931\u8d25 if server_data [ \"status\" ] == 3 : raise err . ProjectTrainError return False","title":"check_train_finish()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.create_from_dataset","text":"\u4ece\u73b0\u6709\u7684\u6570\u636e\u96c6\u521b\u5efa\u9879\u76ee Parameters: Name Type Description Default dataset_id int \u6570\u636e\u96c6id required name str \u9879\u76ee\u540d None model_type int \u6a21\u6001\u7c7b\u578b\u3002 0CSV,1VIDEO,2IMAGE,3SPEECH,4TEXT None task_type int \u4efb\u52a1\u7c7b\u578b\u30020\u4e8c\u5206\u7c7b/\u5206\u7c7b,1\u591a\u5206\u7c7b/\u68c0\u6d4b/\u610f\u56fe\u8bc6\u522b/\u5339\u914d,2\u56de\u5f52/\u5b9a\u4f4d/\u8bed\u97f3\u5206\u79bb/\u5e8f\u5217,3\u65f6\u5e8f/\u5206\u9694 None description str \u9879\u76ee\u63cf\u8ff0 None scene int \u573a\u666f\u6807\u7b7e\u3002 \u679a\u4e3e None primary_label str \u9884\u6d4b\u5217 None primary_main_time_col str \u65f6\u95f4\u5217 None id_cols str id\u5217 None table_relation str \u8868\u5173\u7cfb None advance_settings AdvanceSetting \u9ad8\u7ea7 None search_space_id int \u641c\u7d22\u7a7a\u95f4id 1 icon str '{\"name\": \"IconBangong\", \"label\": \"\u529e\u516c\"}' Returns: Type Description Project Source code in deepwisdom/models/project.py @classmethod def create_from_dataset ( cls , dataset_id , name = None , model_type = None , task_type = None , description = None , scene = None , primary_label = None , primary_main_time_col = None , id_cols = None , table_relation = None , advance_settings : Optional [ AdvanceSetting ] = None , search_space_id = 1 , icon = '{\"name\": \"IconBangong\", \"label\": \"\u529e\u516c\"}' ): \"\"\" \u4ece\u73b0\u6709\u7684\u6570\u636e\u96c6\u521b\u5efa\u9879\u76ee Args: dataset_id (int): \u6570\u636e\u96c6id name (str): \u9879\u76ee\u540d model_type (int): \u6a21\u6001\u7c7b\u578b\u3002 0CSV,1VIDEO,2IMAGE,3SPEECH,4TEXT task_type (int): \u4efb\u52a1\u7c7b\u578b\u30020\u4e8c\u5206\u7c7b/\u5206\u7c7b,1\u591a\u5206\u7c7b/\u68c0\u6d4b/\u610f\u56fe\u8bc6\u522b/\u5339\u914d,2\u56de\u5f52/\u5b9a\u4f4d/\u8bed\u97f3\u5206\u79bb/\u5e8f\u5217,3\u65f6\u5e8f/\u5206\u9694 description (str): \u9879\u76ee\u63cf\u8ff0 scene (int): \u573a\u666f\u6807\u7b7e\u3002 \u679a\u4e3e primary_label (str): \u9884\u6d4b\u5217 primary_main_time_col (str): \u65f6\u95f4\u5217 id_cols (str): id\u5217 table_relation (str): \u8868\u5173\u7cfb advance_settings (AdvanceSetting): \u9ad8\u7ea7 search_space_id (int): \u641c\u7d22\u7a7a\u95f4id icon (str): Returns: Project \"\"\" proj_data = {} proj_data [ \"modal_type\" ] = model_type proj_data [ \"name\" ] = \"SDK_PROJ_\" + str ( dataset_id + time . time ()) if name is not None : proj_data [ \"name\" ] = name proj_data [ \"task_type\" ] = task_type # \u4efb\u52a1\u63cf\u8ff0 proj_data [ \"description\" ] = description proj_data [ \"scene\" ] = scene proj_data [ \"primary_label\" ] = primary_label proj_data [ \"primary_main_time_col\" ] = primary_main_time_col proj_data [ \"id_cols\" ] = id_cols proj_data [ \"table_relation\" ] = json . dumps ({ \"primary_table\" : dataset_id , \"secondary_tables\" : []}) settings = deepcopy ( PROJECT_DEFAULT_ADVANCE_SETTING ) advance_settings = advance_settings or {} settings . update ( advance_settings ) proj_data [ \"advance_settings\" ] = json . dumps ( settings ) proj_data [ \"search_space_id\" ] = search_space_id proj_data [ \"icon\" ] = icon resp = cls . _client . _post ( API_URL . PROJECT_CREATE , proj_data ) if resp [ \"code\" ] != 200 or \"data\" in resp and \"ret\" in resp [ \"data\" ] and resp [ \"data\" ][ \"ret\" ] != 1 : raise err . ServerError ( resp , resp [ \"code\" ]) proj_id = resp [ \"data\" ][ \"new_project_info\" ][ 0 ][ \"id\" ] data = { \"project_id\" : proj_id } server_data = cls . _server_data ( API_URL . PROJECT_INFO , data ) return cls . from_server_data ( server_data )","title":"create_from_dataset()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.create_from_id","text":"\u76f4\u63a5\u4ece\u9879\u76eeid\u521b\u5efa\u9879\u76ee\u5bf9\u8c61 Parameters: Name Type Description Default proj_id int required Source code in deepwisdom/models/project.py @classmethod def create_from_id ( cls , proj_id : int ): \"\"\" \u76f4\u63a5\u4ece\u9879\u76eeid\u521b\u5efa\u9879\u76ee\u5bf9\u8c61 Args: proj_id (int): Returns: \"\"\" data = { \"project_id\" : proj_id } server_data = cls . _server_data ( API_URL . PROJECT_INFO , data ) return cls . from_server_data ( server_data )","title":"create_from_id()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.dataset_list","text":"\u9879\u76ee\u7ed1\u5b9a\u7684\u6570\u636e\u96c6\u5217\u8868 Source code in deepwisdom/models/project.py def dataset_list ( self ): \"\"\" \u9879\u76ee\u7ed1\u5b9a\u7684\u6570\u636e\u96c6\u5217\u8868 Returns: \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_DATASET_LIST , data ) return server_data","title":"dataset_list()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.delete","text":"Parameters: Name Type Description Default proj_ids list required Source code in deepwisdom/models/project.py @classmethod def delete ( cls , proj_ids : list ): \"\"\" Args: proj_ids (list): Returns: \"\"\" data = { \"project_id\" : proj_ids } cls . _client . _delete ( API_URL . PROJECT_DELETE , data )","title":"delete()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.get_select_models","text":"\u9700\u8981\u90e8\u7f72\u7684\u6a21\u578b\u4fe1\u606f Parameters: Name Type Description Default trial_no int required trial_type int required Returns: Type Description []ModelInstance Source code in deepwisdom/models/project.py def get_select_models ( self , trial_no : int , trial_type : int ): \"\"\" \u9700\u8981\u90e8\u7f72\u7684\u6a21\u578b\u4fe1\u606f Args: trial_no (int): trial_type (int): Returns: []ModelInstance \"\"\" data = { \"project_id\" : self . project_id , \"trial_no\" : trial_no , \"trial_type\" : trial_type } server_data = self . _server_data ( API_URL . PROJECT_MODEL_SELECT , data ) init_data = [ dict ( ModelInstance . _safe_data ( item )) for item in server_data ] return [ ModelInstance ( project_id = self . project_id , trial_no = trial_no , trial_type = trial_type , ** data ) for data in init_data ]","title":"get_select_models()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.model_list","text":"Source code in deepwisdom/models/project.py def model_list ( self ): \"\"\" Returns: \"\"\"","title":"model_list()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.offline_prediction_list","text":"\u83b7\u53d6\u9879\u76ee\u7684\u9884\u6d4b\u5217\u8868 Parameters: Name Type Description Default project_id uint64 \u9879\u76eeid required Source code in deepwisdom/models/project.py def offline_prediction_list ( self ) -> List [ OfflinePredictionListMember ]: \"\"\"\u83b7\u53d6\u9879\u76ee\u7684\u9884\u6d4b\u5217\u8868 Args: project_id (uint64): \u9879\u76eeid \"\"\" data = { \"project_id\" : self . project_id , } server_data = self . _server_data ( API_URL . PREDICTION_LIST , data ) init_data = [ OfflinePredictionListMember . _filter_data ( OfflinePredictionListMember . _converter . check ( item )) for item in server_data ] return [ OfflinePredictionListMember ( ** data ) for data in init_data ]","title":"offline_prediction_list()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.predict_dataset_list","text":"\u79bb\u7ebf\u9884\u6d4b\u6570\u636e\u96c6\u5217\u8868 Source code in deepwisdom/models/project.py def predict_dataset_list ( self ): \"\"\" \u79bb\u7ebf\u9884\u6d4b\u6570\u636e\u96c6\u5217\u8868 Returns: \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . DATASET_PREDICT_LIST , data ) init_data = [ dict ( PredictDataset . _safe_data ( item )) for item in server_data ] return [ PredictDataset ( project_id = self . project_id , ** data ) for data in init_data ]","title":"predict_dataset_list()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.predict_file","text":"\u9884\u6d4b\u6587\u4ef6 Returns: Type Description OfflinePrediction \u79bb\u7ebf\u9884\u6d4b\u5bf9\u8c61 Source code in deepwisdom/models/project.py def predict_file ( self , model_id : int , filename ) -> OfflinePrediction : \"\"\"\u9884\u6d4b\u6587\u4ef6 Returns: OfflinePrediction: \u79bb\u7ebf\u9884\u6d4b\u5bf9\u8c61 \"\"\" dataset = self . upload_predict_dataset ( filename ) if not dataset : return None prediction = OfflinePrediction . predict ( model_id , dataset . dataset_id ) return prediction","title":"predict_file()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.recommended_select_model","text":"\u83b7\u53d6\u63a8\u8350\u7684\u6a21\u578b Returns: Type Description ModelInstance Source code in deepwisdom/models/project.py def recommended_select_model ( self ): \"\"\" \u83b7\u53d6\u63a8\u8350\u7684\u6a21\u578b Returns: ModelInstance \"\"\" solutions = self . solution_list () try : models = self . get_select_models ( solutions [ 0 ] . trial_no , solutions [ 0 ] . trial_type ) return models [ 0 ] except IndexError : logging . error ( \"no found\" ) return None","title":"recommended_select_model()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.retrain","text":"\u91cd\u65b0\u8bad\u7ec3 Source code in deepwisdom/models/project.py def retrain ( self ): \"\"\" \u91cd\u65b0\u8bad\u7ec3 Returns: \"\"\" data = { \"project_id\" : self . project_id } self . _client . _patch ( API_URL . PROJECT_TRAIN , data )","title":"retrain()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.service_list","text":"\u83b7\u53d6\u9879\u76ee\u7684\u670d\u52a1\u5217\u8868 Returns: Type Description List[DeploymentInfo] \u670d\u52a1\u5217\u8868 Source code in deepwisdom/models/project.py def service_list ( self ) -> List [ DeploymentListMember ]: \"\"\" \u83b7\u53d6\u9879\u76ee\u7684\u670d\u52a1\u5217\u8868 Returns: List[DeploymentInfo]: \u670d\u52a1\u5217\u8868 \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . DEPLOY_LIST_DEPLOYMENTS , data ) init_data = [ DeploymentListMember . _filter_data ( DeploymentListMember . _converter . check ( item )) for item in server_data ] return [ DeploymentListMember ( ** data ) for data in init_data ]","title":"service_list()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.solution_list","text":"\u9879\u76ee\u65b9\u6848\u5217\u8868 Returns: Type Description []Solution Source code in deepwisdom/models/project.py def solution_list ( self ): \"\"\" \u9879\u76ee\u65b9\u6848\u5217\u8868 Returns: []Solution \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_SCHEME , data ) solution_list = server_data [ \"scheme\" ] init_data = [ dict ( Solution . _safe_data ( item )) for item in solution_list ] return [ Solution ( project_id = self . project_id , ** data ) for data in init_data ]","title":"solution_list()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.terminate_train","text":"\u7ec8\u6b62\u8bad\u7ec3\uff0c /project/terminate/train Source code in deepwisdom/models/project.py def terminate_train ( self ): \"\"\" \u7ec8\u6b62\u8bad\u7ec3\uff0c /project/terminate/train Returns: \"\"\" data = { \"project_id\" : self . project_id } self . _client . _post ( API_URL . PROJECT_TERMINATE_TRAIN , data )","title":"terminate_train()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.train","text":"\u5f00\u59cb\u8bad\u7ec3 Source code in deepwisdom/models/project.py def train ( self ): \"\"\" \u5f00\u59cb\u8bad\u7ec3 Returns: \"\"\" data = { \"project_id\" : self . project_id } self . _client . _post ( API_URL . PROJECT_TRAIN , data ) return","title":"train()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.trial_list","text":"\u83b7\u53d6\u9879\u76ee\u7684\u5b9e\u9a8c\u5217\u8868 Returns: Type Description []Trial Source code in deepwisdom/models/project.py def trial_list ( self ): \"\"\" \u83b7\u53d6\u9879\u76ee\u7684\u5b9e\u9a8c\u5217\u8868 Returns: []Trial \"\"\" data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_EFFECT , data ) trials = server_data [ \"scheme_data\" ] init_data = [ dict ( Trial . _safe_data ( item )) for item in trials ] return [ Trial ( project_id = self . project_id , ** data ) for data in init_data ]","title":"trial_list()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.update_advance_settings","text":"\u9879\u76ee\u9ad8\u7ea7\u8bbe\u7f6e\u66f4\u65b0 Source code in deepwisdom/models/project.py def update_advance_settings ( self , advance_settings : Optional [ AdvanceSetting ]): \"\"\" \u9879\u76ee\u9ad8\u7ea7\u8bbe\u7f6e\u66f4\u65b0 Returns: \"\"\" settings = deepcopy ( PROJECT_DEFAULT_ADVANCE_SETTING ) advance_settings = advance_settings or {} settings . update ( advance_settings ) data = { \"project_id\" : self . project_id , \"advance_settings\" : json . dumps ( settings ) } self . _client . _patch ( API_URL . PROJECT_ADVANCESETTING_UPDATE , data )","title":"update_advance_settings()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.upload_predict_dataset","text":"Parameters: Name Type Description Default filename str None Source code in deepwisdom/models/project.py def upload_predict_dataset ( self , filename = None ): \"\"\" Args: filename (str): Returns: \"\"\" data = { \"project_id\" : self . project_id } file_type = os . path . splitext ( filename )[ - 1 ][ 1 :] if file_type == \"csv\" or file_type == \"txt\" : mime_type = 'text/csv' else : mime_type = 'application/octet-stream' with open ( filename , 'rb' ) as f : files = { \"file\" : ( os . path . basename ( filename ), f , mime_type ) } response = self . _client . _upload ( API_URL . DATASET_PREDICT_UPLOAD , data , files ) dataset = dict ( PredictDataset . _safe_data ( response [ \"data\" ])) return PredictDataset ( project_id = self . project_id , ** dataset )","title":"upload_predict_dataset()"},{"location":"API%20Reference/project/#deepwisdom.models.project.Project.wait_train","text":"\u8bad\u7ec3\uff0c\u5e76\u7b49\u5f85\u8bad\u7ec3\u5b8c\u6210 Source code in deepwisdom/models/project.py def wait_train ( self ): \"\"\" \u8bad\u7ec3\uff0c\u5e76\u7b49\u5f85\u8bad\u7ec3\u5b8c\u6210 Returns: \"\"\" self . train () # \u8f6e\u8be2\u67e5\u8be2\u8bad\u7ec3\u8fdb\u5ea6, 5s\u4e00\u6b21 while True : data = { \"project_id\" : self . project_id } server_data = self . _server_data ( API_URL . PROJECT_INFO , data ) logging . info ( server_data ) if \"ret\" in server_data and server_data [ \"ret\" ] != 1 : logging . error ( server_data ) raise err . GetProjectInfoError # \u8bad\u7ec3\u6210\u529f if server_data [ \"status\" ] == 2 : self . status = server_data [ \"status\" ] break # \u8bad\u7ec3\u5931\u8d25 if server_data [ \"status\" ] == 3 : raise err . ProjectTrainError time . sleep ( 5 ) return","title":"wait_train()"},{"location":"API%20Reference/project/#deepwisdom.models.project.TableRelation","text":"","title":"TableRelation"},{"location":"API%20Reference/project/#deepwisdom.models.project.TrainSetting","text":"TrainSetting(train_data_ratio: int = 80, training_program: = '\u6307\u6807\u4f18\u5148', call_limit: List[int] = None, instance_num: int = 2, call_delay: int = 50, gpu_mem: int = 0, memory_limit: int = 20, max_trials: int = 30, trial_concurrency: int = 3, random_seed: int = 1647)","title":"TrainSetting"},{"location":"API%20Reference/solution/","text":"Solution ( APIObject ) __init__ ( self , project_id , trial_no , trial_type , model_name = None ) special \u65b9\u6848\u7c7b Parameters: Name Type Description Default project_id int \u9879\u76eeid required trial_no int \u5b9e\u9a8cid required trial_type int \u5b9e\u9a8c\u7c7b\u578b required model_name str \u6a21\u578b\u540d\u79f0 None Source code in deepwisdom/models/solution.py def __init__ ( self , project_id , trial_no , trial_type , model_name = None ): \"\"\" \u65b9\u6848\u7c7b Args: project_id (int): \u9879\u76eeid trial_no (int): \u5b9e\u9a8cid trial_type (int): \u5b9e\u9a8c\u7c7b\u578b model_name (str): \u6a21\u578b\u540d\u79f0 \"\"\" self . project_id = project_id self . trial_no = trial_no self . trial_type = trial_type self . model_name = model_name get_detail ( self , tab_type = 1 ) \u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de\u8be6\u60c5json, \u540e\u7eed\u68b3\u7406\u8fd4\u56de\u7ed3\u6784\u53ef\u7ec6\u5316 Parameters: Name Type Description Default tab_type int 1\u6548\u679c\u56fe 2\u6a21\u578b\u53c2\u6570 3\u6a21\u578b\u7279\u5f81\u91cd\u8981\u6027 4 \u6df7\u6dc6\u77e9\u9635 5\u6700\u4f18\u8dd1\u6d4b\u7ed3\u679c 6\u7279\u5f81\u76f8\u5173\u6027 7\u7279\u5f81\u91cd\u8981\u6027\u5206\u5e03 1 Source code in deepwisdom/models/solution.py def get_detail ( self , tab_type = 1 ): \"\"\" \u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de\u8be6\u60c5json, \u540e\u7eed\u68b3\u7406\u8fd4\u56de\u7ed3\u6784\u53ef\u7ec6\u5316 Args: tab_type (int): 1\u6548\u679c\u56fe 2\u6a21\u578b\u53c2\u6570 3\u6a21\u578b\u7279\u5f81\u91cd\u8981\u6027 4 \u6df7\u6dc6\u77e9\u9635 5\u6700\u4f18\u8dd1\u6d4b\u7ed3\u679c 6\u7279\u5f81\u76f8\u5173\u6027 7\u7279\u5f81\u91cd\u8981\u6027\u5206\u5e03 Returns: \"\"\" data = { \"project_id\" : self . project_id , \"trial_no\" : self . trial_no , \"tab_type\" : tab_type } return self . _server_data ( API_URL . PROJECT_MODEL , data )","title":"Solution"},{"location":"API%20Reference/solution/#deepwisdom.models.solution.Solution","text":"","title":"Solution"},{"location":"API%20Reference/solution/#deepwisdom.models.solution.Solution.__init__","text":"\u65b9\u6848\u7c7b Parameters: Name Type Description Default project_id int \u9879\u76eeid required trial_no int \u5b9e\u9a8cid required trial_type int \u5b9e\u9a8c\u7c7b\u578b required model_name str \u6a21\u578b\u540d\u79f0 None Source code in deepwisdom/models/solution.py def __init__ ( self , project_id , trial_no , trial_type , model_name = None ): \"\"\" \u65b9\u6848\u7c7b Args: project_id (int): \u9879\u76eeid trial_no (int): \u5b9e\u9a8cid trial_type (int): \u5b9e\u9a8c\u7c7b\u578b model_name (str): \u6a21\u578b\u540d\u79f0 \"\"\" self . project_id = project_id self . trial_no = trial_no self . trial_type = trial_type self . model_name = model_name","title":"__init__()"},{"location":"API%20Reference/solution/#deepwisdom.models.solution.Solution.get_detail","text":"\u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de\u8be6\u60c5json, \u540e\u7eed\u68b3\u7406\u8fd4\u56de\u7ed3\u6784\u53ef\u7ec6\u5316 Parameters: Name Type Description Default tab_type int 1\u6548\u679c\u56fe 2\u6a21\u578b\u53c2\u6570 3\u6a21\u578b\u7279\u5f81\u91cd\u8981\u6027 4 \u6df7\u6dc6\u77e9\u9635 5\u6700\u4f18\u8dd1\u6d4b\u7ed3\u679c 6\u7279\u5f81\u76f8\u5173\u6027 7\u7279\u5f81\u91cd\u8981\u6027\u5206\u5e03 1 Source code in deepwisdom/models/solution.py def get_detail ( self , tab_type = 1 ): \"\"\" \u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de\u8be6\u60c5json, \u540e\u7eed\u68b3\u7406\u8fd4\u56de\u7ed3\u6784\u53ef\u7ec6\u5316 Args: tab_type (int): 1\u6548\u679c\u56fe 2\u6a21\u578b\u53c2\u6570 3\u6a21\u578b\u7279\u5f81\u91cd\u8981\u6027 4 \u6df7\u6dc6\u77e9\u9635 5\u6700\u4f18\u8dd1\u6d4b\u7ed3\u679c 6\u7279\u5f81\u76f8\u5173\u6027 7\u7279\u5f81\u91cd\u8981\u6027\u5206\u5e03 Returns: \"\"\" data = { \"project_id\" : self . project_id , \"trial_no\" : self . trial_no , \"tab_type\" : tab_type } return self . _server_data ( API_URL . PROJECT_MODEL , data )","title":"get_detail()"},{"location":"API%20Reference/trial/","text":"EffectMetric ( APIObject ) __init__ ( self , auc = None , f1_score = None , macro_f1 = None , micro_f1 = None , weight_f1 = None , mcc = None , ks = None , log_loss = None , acc = None , precision = None , eer = None ) special \u6548\u679c\u6307\u6807 Parameters: Name Type Description Default auc float None f1_score float None macro_f1 float None micro_f1 float None weight_f1 float None mcc float None ks float None log_loss float None acc None precision float None eer float None Source code in deepwisdom/models/trial.py def __init__ ( self , auc = None , f1_score = None , macro_f1 = None , micro_f1 = None , weight_f1 = None , mcc = None , ks = None , log_loss = None , acc = None , precision = None , eer = None ): \"\"\" \u6548\u679c\u6307\u6807 Args: auc (float): f1_score (float): macro_f1 (float): micro_f1 (float): weight_f1 (float): mcc (float): ks (float): log_loss (float): acc (): precision (float): eer (float): \"\"\" self . auc = auc self . f1_score = f1_score self . macro_f1 = macro_f1 self . micro_f1 = micro_f1 self . weight_f1 = weight_f1 self . mcc = mcc self . ks = ks self . log_loss = log_loss self . acc = acc self . precision = precision self . eer = eer Metric ( APIObject ) __init__ ( self , performance_metrics = None , effect_metrics = None ) special \u6307\u6807\u76f8\u5173 Parameters: Name Type Description Default performance_metrics PerformanceMetric \u6027\u80fd\u6307\u6807 None effect_metrics EffectMetric \u6548\u679c\u6307\u6807 None Source code in deepwisdom/models/trial.py def __init__ ( self , performance_metrics = None , effect_metrics = None ): \"\"\" \u6307\u6807\u76f8\u5173 Args: performance_metrics (PerformanceMetric): \u6027\u80fd\u6307\u6807 effect_metrics (EffectMetric): \u6548\u679c\u6307\u6807 \"\"\" self . performance_metrics = PerformanceMetric ( ** performance_metrics ) self . effect_metrics = EffectMetric ( ** effect_metrics ) PerformanceMetric ( APIObject ) __init__ ( self , fps = None , ict = None , flops = None , max_mem = None ) special \u6027\u80fd\u6307\u6807 Parameters: Name Type Description Default fps float None ict float None flops int None max_mem float None Source code in deepwisdom/models/trial.py def __init__ ( self , fps = None , ict = None , flops = None , max_mem = None ): \"\"\" \u6027\u80fd\u6307\u6807 Args: fps (float): ict (float): flops (int): max_mem (float): \"\"\" self . fps = fps self . ict = ict self . flops = flops self . max_mem = max_mem Trial ( APIObject ) __init__ ( self , project_id , trial_no , trial_type = None , status = None , best_metric_key = None , best_metric_value = None , time_consuming = None , start_time = None , end_time = None , is_model = None , trial_metric = None ) special \u5b9e\u9a8c\u8be6\u60c5 Parameters: Name Type Description Default project_id int \u9879\u76eeid required trial_no int \u5b9e\u9a8cid required trial_type int \u5b9e\u9a8c\u7c7b\u578b None status int \u72b6\u6001 None best_metric_key str \u6700\u4f73\u6307\u6807 None best_metric_value float \u6700\u4f73\u6307\u6807\u503c None time_consuming float \u8017\u65f6 None start_time float \u5b9e\u9a8c\u5f00\u59cb\u65f6\u95f4 None end_time float \u5b9e\u9a8c\u7ed3\u675f\u65f6\u95f4 None is_model int None trial_metric Metric \u5b9e\u9a8c\u8be6\u7ec6\u6307\u6807 None Source code in deepwisdom/models/trial.py def __init__ ( self , project_id , trial_no , trial_type = None , status = None , best_metric_key = None , best_metric_value = None , time_consuming = None , start_time = None , end_time = None , is_model = None , trial_metric = None ): \"\"\" \u5b9e\u9a8c\u8be6\u60c5 Args: project_id (int): \u9879\u76eeid trial_no (int): \u5b9e\u9a8cid trial_type (int): \u5b9e\u9a8c\u7c7b\u578b status (int): \u72b6\u6001 best_metric_key (str): \u6700\u4f73\u6307\u6807 best_metric_value (float): \u6700\u4f73\u6307\u6807\u503c time_consuming (float): \u8017\u65f6 start_time (float): \u5b9e\u9a8c\u5f00\u59cb\u65f6\u95f4 end_time (float): \u5b9e\u9a8c\u7ed3\u675f\u65f6\u95f4 is_model (int): trial_metric (Metric): \u5b9e\u9a8c\u8be6\u7ec6\u6307\u6807 \"\"\" self . project_id = project_id self . trial_no = trial_no self . trial_type = trial_type self . status = status , self . best_metric_key = best_metric_key self . best_metric_value = best_metric_value self . time_consuming = time_consuming self . start_time = start_time self . end_time = end_time self . is_model = is_model self . trial_metric = Metric ( ** trial_metric )","title":"Trial"},{"location":"API%20Reference/trial/#deepwisdom.models.trial.EffectMetric","text":"","title":"EffectMetric"},{"location":"API%20Reference/trial/#deepwisdom.models.trial.EffectMetric.__init__","text":"\u6548\u679c\u6307\u6807 Parameters: Name Type Description Default auc float None f1_score float None macro_f1 float None micro_f1 float None weight_f1 float None mcc float None ks float None log_loss float None acc None precision float None eer float None Source code in deepwisdom/models/trial.py def __init__ ( self , auc = None , f1_score = None , macro_f1 = None , micro_f1 = None , weight_f1 = None , mcc = None , ks = None , log_loss = None , acc = None , precision = None , eer = None ): \"\"\" \u6548\u679c\u6307\u6807 Args: auc (float): f1_score (float): macro_f1 (float): micro_f1 (float): weight_f1 (float): mcc (float): ks (float): log_loss (float): acc (): precision (float): eer (float): \"\"\" self . auc = auc self . f1_score = f1_score self . macro_f1 = macro_f1 self . micro_f1 = micro_f1 self . weight_f1 = weight_f1 self . mcc = mcc self . ks = ks self . log_loss = log_loss self . acc = acc self . precision = precision self . eer = eer","title":"__init__()"},{"location":"API%20Reference/trial/#deepwisdom.models.trial.Metric","text":"","title":"Metric"},{"location":"API%20Reference/trial/#deepwisdom.models.trial.Metric.__init__","text":"\u6307\u6807\u76f8\u5173 Parameters: Name Type Description Default performance_metrics PerformanceMetric \u6027\u80fd\u6307\u6807 None effect_metrics EffectMetric \u6548\u679c\u6307\u6807 None Source code in deepwisdom/models/trial.py def __init__ ( self , performance_metrics = None , effect_metrics = None ): \"\"\" \u6307\u6807\u76f8\u5173 Args: performance_metrics (PerformanceMetric): \u6027\u80fd\u6307\u6807 effect_metrics (EffectMetric): \u6548\u679c\u6307\u6807 \"\"\" self . performance_metrics = PerformanceMetric ( ** performance_metrics ) self . effect_metrics = EffectMetric ( ** effect_metrics )","title":"__init__()"},{"location":"API%20Reference/trial/#deepwisdom.models.trial.PerformanceMetric","text":"","title":"PerformanceMetric"},{"location":"API%20Reference/trial/#deepwisdom.models.trial.PerformanceMetric.__init__","text":"\u6027\u80fd\u6307\u6807 Parameters: Name Type Description Default fps float None ict float None flops int None max_mem float None Source code in deepwisdom/models/trial.py def __init__ ( self , fps = None , ict = None , flops = None , max_mem = None ): \"\"\" \u6027\u80fd\u6307\u6807 Args: fps (float): ict (float): flops (int): max_mem (float): \"\"\" self . fps = fps self . ict = ict self . flops = flops self . max_mem = max_mem","title":"__init__()"},{"location":"API%20Reference/trial/#deepwisdom.models.trial.Trial","text":"","title":"Trial"},{"location":"API%20Reference/trial/#deepwisdom.models.trial.Trial.__init__","text":"\u5b9e\u9a8c\u8be6\u60c5 Parameters: Name Type Description Default project_id int \u9879\u76eeid required trial_no int \u5b9e\u9a8cid required trial_type int \u5b9e\u9a8c\u7c7b\u578b None status int \u72b6\u6001 None best_metric_key str \u6700\u4f73\u6307\u6807 None best_metric_value float \u6700\u4f73\u6307\u6807\u503c None time_consuming float \u8017\u65f6 None start_time float \u5b9e\u9a8c\u5f00\u59cb\u65f6\u95f4 None end_time float \u5b9e\u9a8c\u7ed3\u675f\u65f6\u95f4 None is_model int None trial_metric Metric \u5b9e\u9a8c\u8be6\u7ec6\u6307\u6807 None Source code in deepwisdom/models/trial.py def __init__ ( self , project_id , trial_no , trial_type = None , status = None , best_metric_key = None , best_metric_value = None , time_consuming = None , start_time = None , end_time = None , is_model = None , trial_metric = None ): \"\"\" \u5b9e\u9a8c\u8be6\u60c5 Args: project_id (int): \u9879\u76eeid trial_no (int): \u5b9e\u9a8cid trial_type (int): \u5b9e\u9a8c\u7c7b\u578b status (int): \u72b6\u6001 best_metric_key (str): \u6700\u4f73\u6307\u6807 best_metric_value (float): \u6700\u4f73\u6307\u6807\u503c time_consuming (float): \u8017\u65f6 start_time (float): \u5b9e\u9a8c\u5f00\u59cb\u65f6\u95f4 end_time (float): \u5b9e\u9a8c\u7ed3\u675f\u65f6\u95f4 is_model (int): trial_metric (Metric): \u5b9e\u9a8c\u8be6\u7ec6\u6307\u6807 \"\"\" self . project_id = project_id self . trial_no = trial_no self . trial_type = trial_type self . status = status , self . best_metric_key = best_metric_key self . best_metric_value = best_metric_value self . time_consuming = time_consuming self . start_time = start_time self . end_time = end_time self . is_model = is_model self . trial_metric = Metric ( ** trial_metric )","title":"__init__()"},{"location":"examples/examples/","text":"\u76ee\u524d\u53ef\u7b80\u5355\u53c2\u8003\u5982\u4e0b\u4e3b\u6d41\u7a0b\u7684\u7528\u4f8b import time import unittest import deepwisdom as dw dataset_file_path = \"/Users/up/Downloads/\" dataset_file_name = \"data_upload_test.csv\" train_succ_status = 2 class TestMainProcess(unittest.TestCase): def test_main_process(self): # \u521d\u59cb\u5316api_client api_client = dw.Client(appid=4, api_key=\"RrTLKoGrgKRXkSJAstcndNLa\", secret_key=\"xJHb3TjOxh1cqVb0seLBEpHDWLA3fYE7\", domain=\"http://192.168.50.122:30772\") dw.set_client(client=api_client) # \u6570\u636e\u96c6\u4e0a\u4f20 dataset = dw.Dataset.create_from_file(dataset_file_path+dataset_file_name, 0) self.assertEqual(dataset.name, dataset_file_name) time.sleep(60) #\u8fd9\u91cc\u9700\u8981\u7b49dataset\u90fd\u5904\u7406\u5b8c\uff08\u5305\u62eceda\u5565\u7684\uff09 @chucheng # \u9879\u76ee\u521b\u5efa primary_label = \"is_marry\" # \u9884\u6d4b\u5217 project_name = \"SDK-MAIN-PROCESS-TEST\" # \u9879\u76ee\u540d\u79f0 train_setting = dw.TrainSetting(training_program=\"zhipeng\", max_trials=3) # \u4e00\u4e9b\u9ad8\u7ea7\u8bbe\u7f6e settings = dw.AdvanceSetting(\"off\", \"ga\", 6571, target_train=train_setting) dataset_id = dataset.dataset_id project = dw.Project.create_from_dataset(name=project_name, dataset_id=dataset_id, model_type=0, task_type=0, scene=1, primary_label=primary_label, primary_main_time_col=\"\", id_cols=\"\", advance_settings=settings) self.assertEqual(project.name, project_name) ## \u5f00\u59cb\u6a21\u578b\u8bad\u7ec3 project.wait_train() self.assertEqual(train_succ_status, project.status) ## \u65b9\u6848\u5217\u8868 solutions = project.solution_list() solution_one = solutions[0] self.assertEqual(solution_one.project_id, project.project_id) ## \u6a21\u578b\u5217\u8868 models = project.get_select_models(solution_one.trial_no, solution_one.trial_type) model_one = models[0] self.assertEqual(model_one.project_id, project.project_id) ## \u670d\u52a1\u90e8\u7f72 deployment = dw.Deployment.create_deployment({ \"project_id\": project.project_id, \"model_inst_id\": model_one.model_id, \"name\": \"\u7075\u9b42\u62f7\u95ee--\u665a\u4e0a\u5403\u4ec0\u4e48\", \"gpu_num\": 1, \"gpu_mem\": 2, \"memory_limit\": 2, \"min_pod\": 1, \"max_pod\": 2, }) rsp_body = deployment.call_service({}) self.assertIsNotNone(rsp_body) ## \u79bb\u7ebf\u9884\u6d4b pred = dw.OfflinePrediction.predict_by_model_dataset(model_one.model_id,dataset.dataset_id) self.assertIsNotNone(pred) if __name__ == '__main__': unittest.main()","title":"Examples"},{"location":"tutorials/data/","text":"\u6570\u636e(Dataset) \u521b\u5efa/\u5220\u9664\u6570\u636e\u96c6 \u4ece\u672c\u5730\u6570\u636e\u96c6\u6587\u4ef6\uff0c \u521b\u5efa\u6570\u636e\u96c6\u5bf9\u8c61 create_from_file \u76f4\u63a5\u4ece\u6570\u636e\u96c6id\u521b\u5efa create_from_dataset_id \u5220\u9664\u6307\u5b9a\u6570\u636e\u96c6 delete \u67e5\u627e\u6570\u636e\u96c6 \u652f\u6301\u6570\u636e\u96c6\u540d\u79f0\u7684\u6a21\u7cca\u641c\u7d22 dataset_search \u6570\u636e\u96c6\u4fe1\u606f\u4fee\u6539 \u652f\u6301\u6570\u636e\u96c6\u540d\u79f0\u7684\u4fee\u6539 modify_dataset","title":"\u6570\u636e(Dataset)"},{"location":"tutorials/data/#dataset","text":"","title":"\u6570\u636e(Dataset)"},{"location":"tutorials/data/#_1","text":"\u4ece\u672c\u5730\u6570\u636e\u96c6\u6587\u4ef6\uff0c \u521b\u5efa\u6570\u636e\u96c6\u5bf9\u8c61 create_from_file \u76f4\u63a5\u4ece\u6570\u636e\u96c6id\u521b\u5efa create_from_dataset_id \u5220\u9664\u6307\u5b9a\u6570\u636e\u96c6 delete","title":"\u521b\u5efa/\u5220\u9664\u6570\u636e\u96c6"},{"location":"tutorials/data/#_2","text":"\u652f\u6301\u6570\u636e\u96c6\u540d\u79f0\u7684\u6a21\u7cca\u641c\u7d22 dataset_search","title":"\u67e5\u627e\u6570\u636e\u96c6"},{"location":"tutorials/data/#_3","text":"\u652f\u6301\u6570\u636e\u96c6\u540d\u79f0\u7684\u4fee\u6539 modify_dataset","title":"\u6570\u636e\u96c6\u4fe1\u606f\u4fee\u6539"},{"location":"tutorials/deployment/","text":"\u63a8\u7406\u670d\u52a1 \u670d\u52a1\u90e8\u7f72 \u670d\u52a1\u90e8\u7f72\u9700\u8981\u4f20\u5165\u9879\u76eeid\u548c\u6a21\u578bid\uff0c\u5929\u673a\u5e73\u53f0\u4f1a\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u955c\u50cf\u89e6\u53d1\u90e8\u7f72\uff0c\u90e8\u7f72\u662f\u5f02\u6b65\u5206\u9636\u6bb5\u7684\uff0c\u4e0d\u540c\u90e8\u7f72\u72b6\u6001\u8be6\u89c1\u63a5\u53e3\u8bf4\u660e \u670d\u52a1\u90e8\u7f72\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u8c03\u7528 \u83b7\u53d6\u670d\u52a1\u5217\u8868 \u83b7\u53d6\u5f53\u524d\u9879\u76ee\u4e0b\u7684\u670d\u52a1\u5217\u8868 \u4fee\u6539\u670d\u52a1\u5e38\u9a7b\u72b6\u6001 \u5f53\u524d\u670d\u52a1\u9ed8\u8ba4\u662f\u65e0\u670d\u52a1\u90e8\u7f72\u65b9\u5f0f\u7684\uff0c\u5f53\u6700\u5c0f\u670d\u52a1\u6570<=0\u65f6\uff0c\u670d\u52a1\u4e00\u6bb5\u65f6\u95f4\u5185\u6ca1\u6709\u88ab\u8c03\u7528\u540e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u56de\u6536\u8d44\u6e90\uff0c\u5f00\u53d1\u8005\u4e3a\u4e86\u907f\u514d\u51b7\u542f\u52a8\u95ee\u9898\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u670d\u52a1\u6700\u5c11\u5b9e\u4f8b\u6570>0\u6765\u7ef4\u6301\u670d\u52a1\u7684\u8fd0\u884c \u4fee\u6539\u670d\u52a1\u540d\u79f0 \u4fee\u6539\u670d\u52a1\u4e2d\u6587\u540d\u79f0 \u8c03\u7528\u670d\u52a1 \u8c03\u7528\u90e8\u7f72\u5b8c\u6210\u7684\u670d\u52a1\u63a5\u53e3\uff0c\u4e0d\u719f\u6089\u53c2\u6570\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7 get_service_api \u63a5\u53e3\u83b7\u5f97\u670d\u52a1\u8c03\u7528demo","title":"\u63a8\u7406\u670d\u52a1"},{"location":"tutorials/deployment/#_1","text":"","title":"\u63a8\u7406\u670d\u52a1"},{"location":"tutorials/deployment/#_2","text":"\u670d\u52a1\u90e8\u7f72\u9700\u8981\u4f20\u5165\u9879\u76eeid\u548c\u6a21\u578bid\uff0c\u5929\u673a\u5e73\u53f0\u4f1a\u81ea\u52a8\u9009\u62e9\u5408\u9002\u7684\u955c\u50cf\u89e6\u53d1\u90e8\u7f72\uff0c\u90e8\u7f72\u662f\u5f02\u6b65\u5206\u9636\u6bb5\u7684\uff0c\u4e0d\u540c\u90e8\u7f72\u72b6\u6001\u8be6\u89c1\u63a5\u53e3\u8bf4\u660e \u670d\u52a1\u90e8\u7f72\u5b8c\u6210\u540e\u5c31\u53ef\u4ee5\u8c03\u7528","title":"\u670d\u52a1\u90e8\u7f72"},{"location":"tutorials/deployment/#_3","text":"\u83b7\u53d6\u5f53\u524d\u9879\u76ee\u4e0b\u7684\u670d\u52a1\u5217\u8868","title":"\u83b7\u53d6\u670d\u52a1\u5217\u8868"},{"location":"tutorials/deployment/#_4","text":"\u5f53\u524d\u670d\u52a1\u9ed8\u8ba4\u662f\u65e0\u670d\u52a1\u90e8\u7f72\u65b9\u5f0f\u7684\uff0c\u5f53\u6700\u5c0f\u670d\u52a1\u6570<=0\u65f6\uff0c\u670d\u52a1\u4e00\u6bb5\u65f6\u95f4\u5185\u6ca1\u6709\u88ab\u8c03\u7528\u540e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u56de\u6536\u8d44\u6e90\uff0c\u5f00\u53d1\u8005\u4e3a\u4e86\u907f\u514d\u51b7\u542f\u52a8\u95ee\u9898\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u670d\u52a1\u6700\u5c11\u5b9e\u4f8b\u6570>0\u6765\u7ef4\u6301\u670d\u52a1\u7684\u8fd0\u884c","title":"\u4fee\u6539\u670d\u52a1\u5e38\u9a7b\u72b6\u6001"},{"location":"tutorials/deployment/#_5","text":"\u4fee\u6539\u670d\u52a1\u4e2d\u6587\u540d\u79f0","title":"\u4fee\u6539\u670d\u52a1\u540d\u79f0"},{"location":"tutorials/deployment/#_6","text":"\u8c03\u7528\u90e8\u7f72\u5b8c\u6210\u7684\u670d\u52a1\u63a5\u53e3\uff0c\u4e0d\u719f\u6089\u53c2\u6570\u7684\u8bdd\u53ef\u4ee5\u901a\u8fc7 get_service_api \u63a5\u53e3\u83b7\u5f97\u670d\u52a1\u8c03\u7528demo","title":"\u8c03\u7528\u670d\u52a1"},{"location":"tutorials/offline_prediction/","text":"\u79bb\u7ebf\u9884\u6d4b \u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u5217\u8868 list_predictions \u521b\u5efa\u79bb\u7ebf\u9884\u6d4b predict \u79bb\u7ebf\u9884\u6d4b\u662f\u5f02\u6b65\u7684\uff0c\u9700\u8981\u6700\u65b0\u72b6\u6001\u7684\u8bdd\u9700\u8981\u901a\u8fc7 get_predict_status \u63a5\u53e3\u83b7\u5f97 \u7b49\u5f85\u79bb\u7ebf\u9884\u6d4b\u7ed3\u679c wait_for_result \u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5 \u901a\u8fc7\u79bb\u7ebf\u9884\u6d4bid\u521b\u5efa\u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b get_predict_detail \u6279\u91cf\u5220\u9664\u79bb\u7ebf\u9884\u6d4b delete_predictions","title":"\u79bb\u7ebf\u9884\u6d4b"},{"location":"tutorials/offline_prediction/#_1","text":"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u5217\u8868 list_predictions","title":"\u79bb\u7ebf\u9884\u6d4b"},{"location":"tutorials/offline_prediction/#_2","text":"predict \u79bb\u7ebf\u9884\u6d4b\u662f\u5f02\u6b65\u7684\uff0c\u9700\u8981\u6700\u65b0\u72b6\u6001\u7684\u8bdd\u9700\u8981\u901a\u8fc7 get_predict_status \u63a5\u53e3\u83b7\u5f97","title":"\u521b\u5efa\u79bb\u7ebf\u9884\u6d4b"},{"location":"tutorials/offline_prediction/#_3","text":"wait_for_result","title":"\u7b49\u5f85\u79bb\u7ebf\u9884\u6d4b\u7ed3\u679c"},{"location":"tutorials/offline_prediction/#_4","text":"\u901a\u8fc7\u79bb\u7ebf\u9884\u6d4bid\u521b\u5efa\u79bb\u7ebf\u9884\u6d4b\u5b9e\u4f8b get_predict_detail","title":"\u83b7\u53d6\u79bb\u7ebf\u9884\u6d4b\u8be6\u60c5"},{"location":"tutorials/offline_prediction/#_5","text":"delete_predictions","title":"\u6279\u91cf\u5220\u9664\u79bb\u7ebf\u9884\u6d4b"},{"location":"tutorials/project/","text":"\u9879\u76ee(Project) \u521b\u5efa/\u5220\u9664\u9879\u76ee \u76ee\u524d\u652f\u6301\u4ece\u73b0\u6709\u7684\u6570\u636e\u96c6\u521b\u5efa\u9879\u76ee( create_from_dataset ) \u548c \u76f4\u63a5\u4ece\u9879\u76eeid\u521b\u5efa\u9879\u76ee( create_from_id ) \u901a\u8fc7\u9879\u76ee\u9879\u76eeid\u53ef\u5220\u9664\u5bf9\u5e94\u7684\u9879\u76ee( delete ) \u9879\u76ee\u9ad8\u7ea7\u8bbe\u7f6e\u66f4\u65b0( update_advance_settings ) \u9879\u76ee\u8bad\u7ec3 \u5f00\u59cb\u8bad\u7ec3( train )\u3002 \u652f\u6301\u5f00\u59cb\uff0c\u5e76\u7b49\u5f85\u8bad\u7ec3\u5b8c\u6210( wait_train ) \u67e5\u8be2\u8bad\u72b6\u6001( check_train_finish ) \u7ec8\u6b62\u8bad\u7ec3( terminate_train ) \u9879\u76ee\u7684\u8bad\u7ec3\u7ed3\u679c \u83b7\u53d6\u5b9e\u9a8c\u5217\u8868( trial_list ) \u83b7\u53d6\u65b9\u6848\u5217\u8868( solution_list ), \u6ce8\u610f\u4e0d\u4e00\u5b9a\u6240\u6709\u7684\u5b9e\u9a8c\u90fd\u6709\u65b9\u6848 \u83b7\u53d6\u53ef\u4ee5\u90e8\u7f72\u7684\u6a21\u578b\u5217\u8868( get_select_models )\uff0c \u8fd9\u91cc\u7684\u6a21\u578bid\u3001\u6a21\u578b\u540d\u79f0\u7528\u4e8e\u79bb\u7ebf\u9884\u6d4b\u548c\u90e8\u7f72\u7684\u5165\u53c2 \u76f4\u63a5\u83b7\u53d6\u63a8\u8350\u7684\u6a21\u578b( recommended_select_model ) \u9879\u76ee\u8be6\u60c5 \u76ee\u524d\u8be6\u60c5\u4fe1\u606f\u4e3aProject\u7684\u6210\u5458\u53d8\u91cf\uff0c\u6ca1\u6709\u66b4\u9732\u66f4\u591a\u7684\u4fe1\u606f","title":"\u9879\u76ee(Project)"},{"location":"tutorials/project/#project","text":"","title":"\u9879\u76ee(Project)"},{"location":"tutorials/project/#_1","text":"\u76ee\u524d\u652f\u6301\u4ece\u73b0\u6709\u7684\u6570\u636e\u96c6\u521b\u5efa\u9879\u76ee( create_from_dataset ) \u548c \u76f4\u63a5\u4ece\u9879\u76eeid\u521b\u5efa\u9879\u76ee( create_from_id ) \u901a\u8fc7\u9879\u76ee\u9879\u76eeid\u53ef\u5220\u9664\u5bf9\u5e94\u7684\u9879\u76ee( delete ) \u9879\u76ee\u9ad8\u7ea7\u8bbe\u7f6e\u66f4\u65b0( update_advance_settings )","title":"\u521b\u5efa/\u5220\u9664\u9879\u76ee"},{"location":"tutorials/project/#_2","text":"\u5f00\u59cb\u8bad\u7ec3( train )\u3002 \u652f\u6301\u5f00\u59cb\uff0c\u5e76\u7b49\u5f85\u8bad\u7ec3\u5b8c\u6210( wait_train ) \u67e5\u8be2\u8bad\u72b6\u6001( check_train_finish ) \u7ec8\u6b62\u8bad\u7ec3( terminate_train )","title":"\u9879\u76ee\u8bad\u7ec3"},{"location":"tutorials/project/#_3","text":"\u83b7\u53d6\u5b9e\u9a8c\u5217\u8868( trial_list ) \u83b7\u53d6\u65b9\u6848\u5217\u8868( solution_list ), \u6ce8\u610f\u4e0d\u4e00\u5b9a\u6240\u6709\u7684\u5b9e\u9a8c\u90fd\u6709\u65b9\u6848 \u83b7\u53d6\u53ef\u4ee5\u90e8\u7f72\u7684\u6a21\u578b\u5217\u8868( get_select_models )\uff0c \u8fd9\u91cc\u7684\u6a21\u578bid\u3001\u6a21\u578b\u540d\u79f0\u7528\u4e8e\u79bb\u7ebf\u9884\u6d4b\u548c\u90e8\u7f72\u7684\u5165\u53c2 \u76f4\u63a5\u83b7\u53d6\u63a8\u8350\u7684\u6a21\u578b( recommended_select_model )","title":"\u9879\u76ee\u7684\u8bad\u7ec3\u7ed3\u679c"},{"location":"tutorials/project/#_4","text":"\u76ee\u524d\u8be6\u60c5\u4fe1\u606f\u4e3aProject\u7684\u6210\u5458\u53d8\u91cf\uff0c\u6ca1\u6709\u66b4\u9732\u66f4\u591a\u7684\u4fe1\u606f","title":"\u9879\u76ee\u8be6\u60c5"}]}